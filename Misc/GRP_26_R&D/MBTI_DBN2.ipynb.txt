{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer  # returns a sparse matrix\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.svm import SVC\n",
        "from xgboost import XGBClassifier\n",
        "from imblearn.over_sampling import RandomOverSampler\n",
        "from sklearn.metrics import accuracy_score, f1_score\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader, TensorDataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T2GkPz_-nnLf",
        "outputId": "46e3b08b-b6bb-49d3-f449-0dfdef031b3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Global Personality Definitions ---\n",
        "personality_type = [\"IE\", \"NS\", \"FT\", \"JP\"]\n",
        "b_Pers = {'I': 0, 'E': 1, 'N': 0, 'S': 1, 'F': 0, 'T': 1, 'J': 0, 'P': 1}\n",
        "b_Pers_list = [\n",
        "    {0: 'I', 1: 'E'},\n",
        "    {0: 'N', 1: 'S'},\n",
        "    {0: 'F', 1: 'T'},\n",
        "    {0: 'J', 1: 'P'}\n",
        "]"
      ],
      "metadata": {
        "id": "Dd4FB4nVnqKv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Data Preprocessing Functions ---\n",
        "def preprocess_posts(text):\n",
        "    from nltk.corpus import stopwords\n",
        "    from nltk.stem import WordNetLemmatizer\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    text = re.sub('http[s]?://\\S+', '', text)       # Remove URLs\n",
        "    text = re.sub(\"[^a-zA-Z]\", \" \", text).lower()     # Remove non-alphabetic characters and lowercase\n",
        "    text = re.sub(r'([a-z])\\1{2,}', '', text)         # Remove long repeated characters\n",
        "    tokens = [lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words]\n",
        "    return \" \".join(tokens)"
      ],
      "metadata": {
        "id": "B_nNAab5nr3G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_text(data):\n",
        "    processed_posts = data['posts'].apply(preprocess_posts).tolist()\n",
        "    return processed_posts"
      ],
      "metadata": {
        "id": "RPMOgr6HntV2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_dichotomy_labels(data):\n",
        "    # Convert MBTI string (e.g. \"INFJ\") into a binary list for each dichotomy.\n",
        "    labels = data['type'].apply(lambda x: [b_Pers[x[0]], b_Pers[x[1]], b_Pers[x[2]], b_Pers[x[3]]])\n",
        "    return np.array(labels.tolist())"
      ],
      "metadata": {
        "id": "cdNCm9jTnueO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def vectorize_text(posts, max_features=1000):\n",
        "    vectorizer = TfidfVectorizer(max_features=max_features)\n",
        "    X = vectorizer.fit_transform(posts)\n",
        "    return X, vectorizer"
      ],
      "metadata": {
        "id": "TvJgOLbDnvsn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- ANN & DBN Models (PyTorch) ---\n",
        "# =============================================================================\n",
        "\n",
        "# ---------- ANN Model ----------\n",
        "class ANN(nn.Module):\n",
        "    def __init__(self, input_dim):\n",
        "        super(ANN, self).__init__()\n",
        "        self.fc1 = nn.Linear(input_dim, 128)\n",
        "        self.relu = nn.ReLU()\n",
        "        self.fc2 = nn.Linear(128, 1)  # Binary classification output\n",
        "        self.sigmoid = nn.Sigmoid()\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.relu(self.fc1(x))\n",
        "        x = self.sigmoid(self.fc2(x))\n",
        "        return x\n",
        "\n",
        "def train_ann_model(X_train, y_train, input_dim, epochs=20, batch_size=64, lr=0.001):\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    model = ANN(input_dim).to(device)\n",
        "    criterion = nn.BCELoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=lr)\n",
        "\n",
        "    dataset = TensorDataset(torch.FloatTensor(X_train), torch.FloatTensor(y_train.reshape(-1, 1)))\n",
        "    loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n",
        "\n",
        "    model.train()\n",
        "    for epoch in range(epochs):\n",
        "        epoch_loss = 0.0\n",
        "        for batch_X, batch_y in loader:\n",
        "            batch_X, batch_y = batch_X.to(device), batch_y.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(batch_X)\n",
        "            loss = criterion(outputs, batch_y)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            epoch_loss += loss.item() * batch_X.size(0)\n",
        "        # Uncomment to monitor progress:\n",
        "        # print(f\"ANN Epoch {epoch+1}/{epochs}, Loss: {epoch_loss/len(dataset):.4f}\")\n",
        "    return model"
      ],
      "metadata": {
        "id": "7ZIuC3k-nzIH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ---------- DBN Model (with RBM Pretraining) ----------\n",
        "class RBM(nn.Module):\n",
        "    def __init__(self, n_vis, n_hid):\n",
        "        super(RBM, self).__init__()\n",
        "        self.W = nn.Parameter(torch.randn(n_vis, n_hid) * 0.01)\n",
        "        self.h_bias = nn.Parameter(torch.zeros(n_hid))\n",
        "        self.v_bias = nn.Parameter(torch.zeros(n_vis))\n",
        "\n",
        "    def sample_h(self, v):\n",
        "        prob = torch.sigmoid(torch.matmul(v, self.W) + self.h_bias)\n",
        "        return prob, torch.bernoulli(prob)\n",
        "\n",
        "    def sample_v(self, h):\n",
        "        prob = torch.sigmoid(torch.matmul(h, self.W.t()) + self.v_bias)\n",
        "        return prob, torch.bernoulli(prob)\n",
        "\n",
        "class DBN(nn.Module):\n",
        "    def __init__(self, input_dim, hidden_dims):\n",
        "        super(DBN, self).__init__()\n",
        "        self.rbm_layers = nn.ModuleList()\n",
        "        dims = [input_dim] + hidden_dims\n",
        "        for i in range(len(dims) - 1):\n",
        "            self.rbm_layers.append(RBM(dims[i], dims[i+1]))\n",
        "        # Final supervised layer for binary classification\n",
        "        self.classifier = nn.Linear(dims[-1], 1)\n",
        "        self.sigmoid = nn.Sigmoid()\n",
        "\n",
        "    def forward(self, x):\n",
        "        for rbm in self.rbm_layers:\n",
        "            x = torch.sigmoid(torch.matmul(x, rbm.W) + rbm.h_bias)\n",
        "        x = self.classifier(x)\n",
        "        x = self.sigmoid(x)\n",
        "        return x\n",
        "\n",
        "def pretrain_rbm(rbm, train_loader, epochs=5, lr=0.01, k=1):\n",
        "    optimizer = optim.SGD(rbm.parameters(), lr=lr)\n",
        "    for epoch in range(epochs):\n",
        "        for batch in train_loader:\n",
        "            v, _ = batch\n",
        "            v = v.view(v.size(0), -1)\n",
        "            # Positive phase\n",
        "            prob_h, h_sample = rbm.sample_h(v)\n",
        "            # Gibbs sampling (Contrastive Divergence)\n",
        "            v_model = v\n",
        "            for _ in range(k):\n",
        "                prob_h, h_sample = rbm.sample_h(v_model)\n",
        "                prob_v, v_model = rbm.sample_v(h_sample)\n",
        "            loss = torch.mean((v - v_model) ** 2)\n",
        "            optimizer.zero_grad()\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "        # Uncomment to log progress:\n",
        "        # print(f\"RBM pretraining epoch {epoch+1}/{epochs}, loss: {loss.item():.4f}\")\n",
        "\n",
        "def train_dbn_model(X_train, y_train, input_dim, hidden_dims=[128, 64],\n",
        "                    pretrain_epochs=5, fine_tune_epochs=20, batch_size=64, lr=0.001):\n",
        "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "    tensor_X = torch.FloatTensor(X_train)\n",
        "    dataset = TensorDataset(tensor_X, torch.zeros(tensor_X.size(0)))  # Dummy labels for RBM training\n",
        "    loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)\n",
        "\n",
        "    dbn = DBN(input_dim, hidden_dims).to(device)\n",
        "    current_input = tensor_X.clone()\n",
        "    for i, rbm in enumerate(dbn.rbm_layers):\n",
        "        layer_dataset = TensorDataset(current_input, torch.zeros(current_input.size(0)))\n",
        "        layer_loader = DataLoader(layer_dataset, batch_size=batch_size, shuffle=True)\n",
        "        pretrain_rbm(rbm, layer_loader, epochs=pretrain_epochs, lr=lr)\n",
        "        new_inputs = []\n",
        "        with torch.no_grad():\n",
        "            for batch, _ in layer_loader:\n",
        "                batch = batch.to(device)\n",
        "                prob_h, _ = rbm.sample_h(batch)\n",
        "                new_inputs.append(prob_h.cpu())\n",
        "        current_input = torch.cat(new_inputs, dim=0)\n",
        "\n",
        "    tensor_y = torch.FloatTensor(y_train.reshape(-1, 1))\n",
        "    fine_tune_dataset = TensorDataset(torch.FloatTensor(X_train), tensor_y)\n",
        "    fine_tune_loader = DataLoader(fine_tune_dataset, batch_size=batch_size, shuffle=True)\n",
        "\n",
        "    criterion = nn.BCELoss()\n",
        "    optimizer = optim.Adam(dbn.parameters(), lr=lr)\n",
        "\n",
        "    dbn.train()\n",
        "    for epoch in range(fine_tune_epochs):\n",
        "        epoch_loss = 0.0\n",
        "        for batch_X, batch_y in fine_tune_loader:\n",
        "            batch_X, batch_y = batch_X.to(device), batch_y.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = dbn(batch_X)\n",
        "            loss = criterion(outputs, batch_y)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            epoch_loss += loss.item() * batch_X.size(0)\n",
        "        # Uncomment to monitor progress:\n",
        "        # print(f\"DBN fine-tune epoch {epoch+1}/{fine_tune_epochs}, loss: {epoch_loss/len(fine_tune_dataset):.4f}\")\n",
        "    return dbn"
      ],
      "metadata": {
        "id": "S1Z2KJXCn2mH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- Training Functions (Individual Dichotomy Models) ---\n",
        "# =============================================================================\n",
        "def train_dichotomy_models(X_train, y_train, model_type='logistic'):\n",
        "    \"\"\"\n",
        "    Trains each of the 4 MBTI dichotomy models individually (without a loop).\n",
        "    model_type can be:\n",
        "      'logistic', 'xgb', 'svm', 'rf', 'naivebayes', 'ann', or 'dbn'.\n",
        "    For PyTorch models, X_train is converted to dense.\n",
        "    \"\"\"\n",
        "    models = {}\n",
        "    oversampler = RandomOverSampler(random_state=42)\n",
        "\n",
        "    # For PyTorch models, get the input dimension (dense version)\n",
        "    if model_type in ['ann', 'dbn']:\n",
        "        X_train_dense = X_train.toarray()\n",
        "        input_dim = X_train_dense.shape[1]\n",
        "\n",
        "    # --- Train IE Model (Dichotomy 0) ---\n",
        "    y_IE = y_train[:, 0]\n",
        "    X_IE_res, y_IE_res = oversampler.fit_resample(X_train, y_IE)\n",
        "    if model_type == 'logistic':\n",
        "        IE_model = LogisticRegression(max_iter=1000, class_weight='balanced')\n",
        "        IE_model.fit(X_IE_res, y_IE_res)\n",
        "    elif model_type == 'xgb':\n",
        "        IE_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "        IE_model.fit(X_IE_res, y_IE_res)\n",
        "    elif model_type == 'svm':\n",
        "        IE_model = SVC(probability=True, class_weight='balanced')\n",
        "        IE_model.fit(X_IE_res, y_IE_res)\n",
        "    elif model_type == 'rf':\n",
        "        IE_model = RandomForestClassifier(n_estimators=200, class_weight='balanced')\n",
        "        IE_model.fit(X_IE_res, y_IE_res)\n",
        "    elif model_type == 'naivebayes':\n",
        "        IE_model = GaussianNB()\n",
        "        IE_model.fit(X_IE_res.toarray(), y_IE_res)\n",
        "    elif model_type == 'ann':\n",
        "        X_IE_dense = X_IE_res.toarray()\n",
        "        IE_model = train_ann_model(X_IE_dense, y_IE_res, input_dim=input_dim, epochs=20, batch_size=64, lr=0.001)\n",
        "    elif model_type == 'dbn':\n",
        "        X_IE_dense = X_IE_res.toarray()\n",
        "        IE_model = train_dbn_model(X_IE_dense, y_IE_res, input_dim=input_dim, hidden_dims=[128, 64],\n",
        "                                   pretrain_epochs=5, fine_tune_epochs=20, batch_size=64, lr=0.001)\n",
        "    else:\n",
        "        raise ValueError(\"Unsupported model type for IE\")\n",
        "    models[\"IE\"] = IE_model\n",
        "\n",
        "    # --- Train NS Model (Dichotomy 1) ---\n",
        "    y_NS = y_train[:, 1]\n",
        "    X_NS_res, y_NS_res = oversampler.fit_resample(X_train, y_NS)\n",
        "    if model_type == 'logistic':\n",
        "        NS_model = LogisticRegression(max_iter=1000, class_weight='balanced')\n",
        "        NS_model.fit(X_NS_res, y_NS_res)\n",
        "    elif model_type == 'xgb':\n",
        "        NS_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "        NS_model.fit(X_NS_res, y_NS_res)\n",
        "    elif model_type == 'svm':\n",
        "        NS_model = SVC(probability=True, class_weight='balanced')\n",
        "        NS_model.fit(X_NS_res, y_NS_res)\n",
        "    elif model_type == 'rf':\n",
        "        NS_model = RandomForestClassifier(n_estimators=200, class_weight='balanced')\n",
        "        NS_model.fit(X_NS_res, y_NS_res)\n",
        "    elif model_type == 'naivebayes':\n",
        "        NS_model = GaussianNB()\n",
        "        NS_model.fit(X_NS_res.toarray(), y_NS_res)\n",
        "    elif model_type == 'ann':\n",
        "        X_NS_dense = X_NS_res.toarray()\n",
        "        NS_model = train_ann_model(X_NS_dense, y_NS_res, input_dim=input_dim, epochs=20, batch_size=64, lr=0.001)\n",
        "    elif model_type == 'dbn':\n",
        "        X_NS_dense = X_NS_res.toarray()\n",
        "        NS_model = train_dbn_model(X_NS_dense, y_NS_res, input_dim=input_dim, hidden_dims=[128, 64],\n",
        "                                   pretrain_epochs=5, fine_tune_epochs=20, batch_size=64, lr=0.001)\n",
        "    else:\n",
        "        raise ValueError(\"Unsupported model type for NS\")\n",
        "    models[\"NS\"] = NS_model\n",
        "\n",
        "    # --- Train FT Model (Dichotomy 2) ---\n",
        "    y_FT = y_train[:, 2]\n",
        "    X_FT_res, y_FT_res = oversampler.fit_resample(X_train, y_FT)\n",
        "    if model_type == 'logistic':\n",
        "        FT_model = LogisticRegression(max_iter=1000, class_weight='balanced')\n",
        "        FT_model.fit(X_FT_res, y_FT_res)\n",
        "    elif model_type == 'xgb':\n",
        "        FT_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "        FT_model.fit(X_FT_res, y_FT_res)\n",
        "    elif model_type == 'svm':\n",
        "        FT_model = SVC(probability=True, class_weight='balanced')\n",
        "        FT_model.fit(X_FT_res, y_FT_res)\n",
        "    elif model_type == 'rf':\n",
        "        FT_model = RandomForestClassifier(n_estimators=200, class_weight='balanced')\n",
        "        FT_model.fit(X_FT_res, y_FT_res)\n",
        "    elif model_type == 'naivebayes':\n",
        "        FT_model = GaussianNB()\n",
        "        FT_model.fit(X_FT_res.toarray(), y_FT_res)\n",
        "    elif model_type == 'ann':\n",
        "        X_FT_dense = X_FT_res.toarray()\n",
        "        FT_model = train_ann_model(X_FT_dense, y_FT_res, input_dim=input_dim, epochs=20, batch_size=64, lr=0.001)\n",
        "    elif model_type == 'dbn':\n",
        "        X_FT_dense = X_FT_res.toarray()\n",
        "        FT_model = train_dbn_model(X_FT_dense, y_FT_res, input_dim=input_dim, hidden_dims=[128, 64],\n",
        "                                   pretrain_epochs=5, fine_tune_epochs=20, batch_size=64, lr=0.001)\n",
        "    else:\n",
        "        raise ValueError(\"Unsupported model type for FT\")\n",
        "    models[\"FT\"] = FT_model\n",
        "\n",
        "    # --- Train JP Model (Dichotomy 3) ---\n",
        "    y_JP = y_train[:, 3]\n",
        "    X_JP_res, y_JP_res = oversampler.fit_resample(X_train, y_JP)\n",
        "    if model_type == 'logistic':\n",
        "        JP_model = LogisticRegression(max_iter=1000, class_weight='balanced')\n",
        "        JP_model.fit(X_JP_res, y_JP_res)\n",
        "    elif model_type == 'xgb':\n",
        "        JP_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "        JP_model.fit(X_JP_res, y_JP_res)\n",
        "    elif model_type == 'svm':\n",
        "        JP_model = SVC(probability=True, class_weight='balanced')\n",
        "        JP_model.fit(X_JP_res, y_JP_res)\n",
        "    elif model_type == 'rf':\n",
        "        JP_model = RandomForestClassifier(n_estimators=200, class_weight='balanced')\n",
        "        JP_model.fit(X_JP_res, y_JP_res)\n",
        "    elif model_type == 'naivebayes':\n",
        "        JP_model = GaussianNB()\n",
        "        JP_model.fit(X_JP_res.toarray(), y_JP_res)\n",
        "    elif model_type == 'ann':\n",
        "        X_JP_dense = X_JP_res.toarray()\n",
        "        JP_model = train_ann_model(X_JP_dense, y_JP_res, input_dim=input_dim, epochs=20, batch_size=64, lr=0.001)\n",
        "    elif model_type == 'dbn':\n",
        "        X_JP_dense = X_JP_res.toarray()\n",
        "        JP_model = train_dbn_model(X_JP_dense, y_JP_res, input_dim=input_dim, hidden_dims=[128, 64],\n",
        "                                   pretrain_epochs=5, fine_tune_epochs=20, batch_size=64, lr=0.001)\n",
        "    else:\n",
        "        raise ValueError(\"Unsupported model type for JP\")\n",
        "    models[\"JP\"] = JP_model\n",
        "\n",
        "    return models"
      ],
      "metadata": {
        "id": "E520Ibcin7bQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- Prediction Function ---\n",
        "# =============================================================================\n",
        "def predict_personality(input_text, models, vectorizer):\n",
        "    preprocessed_text = preprocess_posts(input_text)\n",
        "    transformed_text = vectorizer.transform([preprocessed_text])\n",
        "\n",
        "    predictions = {}\n",
        "    mbti = \"\"\n",
        "    for i, dichotomy in enumerate(personality_type):\n",
        "        model = models[dichotomy]\n",
        "        if hasattr(model, \"forward\"):\n",
        "            input_dense = torch.FloatTensor(transformed_text.toarray()).to(next(model.parameters()).device)\n",
        "            model.eval()\n",
        "            with torch.no_grad():\n",
        "                output = model(input_dense)\n",
        "            pred = int(output.item() > 0.5)\n",
        "            prob = output.item()\n",
        "        else:\n",
        "            pred = model.predict(transformed_text)[0]\n",
        "            if hasattr(model, \"predict_proba\"):\n",
        "                prob = model.predict_proba(transformed_text)[0][pred]\n",
        "            else:\n",
        "                prob = None\n",
        "        predictions[dichotomy] = {'prediction': pred, 'probability': prob}\n",
        "        mbti += b_Pers_list[i][pred]\n",
        "    predictions['MBTI'] = mbti\n",
        "    return predictions"
      ],
      "metadata": {
        "id": "bKgezWCNoCuh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- Evaluation & Comparison Graph Function ---\n",
        "# =============================================================================\n",
        "def evaluate_models(evaluation_models, X_test, y_test, batch_size=64):\n",
        "    \"\"\"\n",
        "    Evaluate each dichotomy model and return a dict of scores:\n",
        "       {model_type: {dichotomy: (accuracy, f1)} }\n",
        "    \"\"\"\n",
        "    scores = {}\n",
        "    for dichotomy in evaluation_models.keys():\n",
        "        model = evaluation_models[dichotomy]\n",
        "        idx = personality_type.index(dichotomy)\n",
        "        y_test_d = y_test[:, idx]\n",
        "        if hasattr(model, \"forward\"):\n",
        "            device = next(model.parameters()).device\n",
        "            X_test_dense = torch.FloatTensor(X_test.toarray()).to(device)\n",
        "            model.eval()\n",
        "            preds = []\n",
        "            with torch.no_grad():\n",
        "                for j in range(0, X_test_dense.size(0), batch_size):\n",
        "                    batch = X_test_dense[j:j+batch_size]\n",
        "                    outputs = model(batch)\n",
        "                    preds.extend([int(x.item() > 0.5) for x in outputs])\n",
        "            acc = accuracy_score(y_test_d, preds)\n",
        "            f1 = f1_score(y_test_d, preds)\n",
        "        else:\n",
        "            y_pred_d = model.predict(X_test)\n",
        "            acc = accuracy_score(y_test_d, y_pred_d)\n",
        "            f1 = f1_score(y_test_d, y_pred_d)\n",
        "        scores[dichotomy] = (acc, f1)\n",
        "    return scores\n",
        "def plot_model_comparison(all_evaluation_results):\n",
        "    \"\"\"\n",
        "    Plots a grouped bar chart comparing the F1 scores of different model types\n",
        "    across the 4 MBTI dichotomies.\n",
        "\n",
        "    all_evaluation_results: dict\n",
        "      Format: {model_type: {dichotomy: (acc, f1), ...}, ...}\n",
        "    \"\"\"\n",
        "    model_types = list(all_evaluation_results.keys())\n",
        "    dichotomies = personality_type\n",
        "    # Create a DataFrame for easier plotting\n",
        "    data = {d: [all_evaluation_results[mt][d][0] for mt in model_types] for d in dichotomies}\n",
        "    df = pd.DataFrame(data, index=model_types)\n",
        "\n",
        "    ax = df.plot(kind='bar', figsize=(10, 7))\n",
        "    plt.title(\"Accuracy Score Comparison Across MBTI Dichotomy Models\")\n",
        "    plt.xlabel(\"Model Type\")\n",
        "    plt.ylabel(\"Accuracy Score\")\n",
        "    plt.ylim(0, 1)\n",
        "    plt.xticks(rotation=0)\n",
        "    plt.legend(title=\"Dichotomy\")\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "CE9WfQ_aoEzA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- Saving & Loading Functions ---\n",
        "# =============================================================================\n",
        "import pickle\n",
        "\n",
        "def save_models_and_vectorizer(models, vectorizer, models_path=\"models.pkl\", vectorizer_path=\"vectorizer.pkl\"):\n",
        "    with open(models_path, 'wb') as f:\n",
        "        pickle.dump(models, f)\n",
        "    with open(vectorizer_path, 'wb') as f:\n",
        "        pickle.dump(vectorizer, f)\n",
        "    print(f\"Models saved to {models_path}\")\n",
        "    print(f\"Vectorizer saved to {vectorizer_path}\")\n",
        "\n",
        "def load_models_and_vectorizer(models_path=\"models.pkl\", vectorizer_path=\"vectorizer.pkl\"):\n",
        "    with open(models_path, 'rb') as f:\n",
        "        models = pickle.load(f)\n",
        "    with open(vectorizer_path, 'rb') as f:\n",
        "        vectorizer = pickle.load(f)\n",
        "    print(f\"Loaded models from {models_path}\")\n",
        "    print(f\"Loaded vectorizer from {vectorizer_path}\")\n",
        "    return models, vectorizer"
      ],
      "metadata": {
        "id": "Vc4VzVanoIhZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YWo7uFenpcv6",
        "outputId": "e4fef166-f14b-4c4c-bbdc-95b51792f689"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================================================\n",
        "# --- Main Pipeline ---\n",
        "# =============================================================================\n",
        "# 1. Load Data & Remove Duplicates\n",
        "file_path = '/content/drive/MyDrive/MBIT_data/MBTI 500.csv'  # Update path accordingly\n",
        "data = pd.read_csv(file_path)\n",
        "data = data.drop_duplicates()  # Remove duplicate rows"
      ],
      "metadata": {
        "id": "L9nxRx9loei8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QtDExg1Jb4JT",
        "outputId": "b02bbb38-1111-49a8-e828-482152e6a5e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 106067 entries, 0 to 106066\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count   Dtype \n",
            "---  ------  --------------   ----- \n",
            " 0   posts   106067 non-null  object\n",
            " 1   type    106067 non-null  object\n",
            "dtypes: object(2)\n",
            "memory usage: 1.6+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_word_count_stats(data):\n",
        "    \"\"\"Calculates max, min, average, and variance of word counts per post for each dichotomy.\"\"\"\n",
        "\n",
        "    def count_words(text):\n",
        "        return len(text.split())\n",
        "\n",
        "    data['word_count'] = data['posts'].apply(count_words)\n",
        "    labels = extract_dichotomy_labels(data)\n",
        "\n",
        "    results = {}\n",
        "    for i, dichotomy in enumerate(personality_type):\n",
        "        dichotomy_results = {}\n",
        "        # Change here: Iterate directly over the list using enumerate to get index and value\n",
        "        for binary_val, label in enumerate(b_Pers_list[i]):\n",
        "            # Access the value (label) using the index and binary_val for filtering\n",
        "            filtered_data = data[labels[:, i] == binary_val]\n",
        "            word_counts = filtered_data['word_count']\n",
        "\n",
        "            dichotomy_results[label] = {\n",
        "                'max': word_counts.max(),\n",
        "                'min': word_counts.min(),\n",
        "                'avg': word_counts.mean(),\n",
        "                'variance': word_counts.var()\n",
        "            }\n",
        "        results[dichotomy] = dichotomy_results\n",
        "    return results\n",
        "\n",
        "def print_word_count_stats(results):\n",
        "    \"\"\"Prints the word count statistics in a tabular format.\"\"\"\n",
        "    print(\"{:<10} {:<10} {:<15} {:<15} {:<15} {:<15}\".format(\"Dichotomy\", \"Label\", \"Max Words\", \"Min Words\", \"Avg Words\", \"Variance\"))\n",
        "    print(\"-\" * 75)\n",
        "\n",
        "    for dichotomy, dichotomy_results in results.items():\n",
        "        for label, stats in dichotomy_results.items():\n",
        "            print(\"{:<10} {:<10} {:<15.4f} {:<15.4f} {:<15.4f} {:<15.4f}\".format(\n",
        "                dichotomy, label, stats['max'], stats['min'], stats['avg'], stats['variance']\n",
        "            ))\n",
        "\n",
        "# Calculate and print the statistics\n",
        "results = calculate_word_count_stats(data)\n",
        "print_word_count_stats(results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NBRK8NplBC7v",
        "outputId": "7429d50a-8a99-4f6e-d0c2-35441b249fe8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dichotomy  Label      Max Words       Min Words       Avg Words       Variance       \n",
            "---------------------------------------------------------------------------\n",
            "I/E        I          508.0000        492.0000        499.9973        0.6055         \n",
            "I/E        E          527.0000        479.0000        500.0913        4.1857         \n",
            "N/S        N          504.0000        496.0000        499.9912        0.2615         \n",
            "N/S        S          527.0000        479.0000        500.3213        14.0270        \n",
            "T/F        T          527.0000        479.0000        500.0455        3.0288         \n",
            "T/F        F          510.0000        491.0000        500.0061        0.6301         \n",
            "J/P        J          527.0000        479.0000        500.0682        2.5578         \n",
            "J/P        P          506.0000        487.0000        499.9849        0.6727         \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# --- Global Personality Definitions ---\n",
        "personality_type = [\"IE\", \"NS\", \"FT\", \"JP\"]\n",
        "b_Pers = {'I': 0, 'E': 1, 'N': 0, 'S': 1, 'F': 0, 'T': 1, 'J': 0, 'P': 1}\n",
        "b_Pers_list = [\n",
        "    {0: 'I', 1: 'E'},\n",
        "    {0: 'N', 1: 'S'},\n",
        "    {0: 'F', 1: 'T'},\n",
        "    {0: 'J', 1: 'P'}\n",
        "]\n",
        "\n",
        "def extract_dichotomy_labels(data):\n",
        "    labels = data['type'].apply(lambda x: [b_Pers[x[0]], b_Pers[x[1]], b_Pers[x[2]], b_Pers[x[3]]])\n",
        "    return np.array(labels.tolist())\n",
        "\n",
        "# Load Data & Remove Duplicates\n",
        "file_path = '/content/drive/MyDrive/MBIT_data/MBTI 500.csv'  # Update path accordingly\n",
        "data = pd.read_csv(file_path)\n",
        "data = data.drop_duplicates()\n",
        "\n",
        "def count_words(text):\n",
        "    return len(text.split())\n",
        "\n",
        "data['word_count'] = data['posts'].apply(count_words)\n",
        "labels = extract_dichotomy_labels(data)\n",
        "\n",
        "def visualize_word_count_distribution(data, labels):\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "    for i, key in enumerate(['I/E', 'S/N', 'T/F', 'J/P']):\n",
        "        plt.subplot(2, 2, i + 1)\n",
        "\n",
        "        for binary_val, label in b_Pers_list[i].items():  # Corrected line\n",
        "            filtered_data = data[labels[:, i] == binary_val]\n",
        "            word_counts = filtered_data['word_count']\n",
        "\n",
        "            plt.hist(word_counts, bins=20, alpha=0.5, label=label)\n",
        "\n",
        "        plt.title(f'Word Count Distribution ({key})')\n",
        "        plt.xlabel('Word Count')\n",
        "        plt.ylabel('Frequency')\n",
        "        plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "def visualize_word_count_boxplots(data, labels):\n",
        "    \"\"\"Visualizes the word count distributions using boxplots.\"\"\"\n",
        "    for i, dichotomy in enumerate(personality_type):\n",
        "        plt.figure(figsize=(8, 6))\n",
        "        plt.title(f'Word Count Boxplots by Dichotomy: {dichotomy}')\n",
        "\n",
        "        dichotomy_labels = [b_Pers_list[i][val] for val in sorted(b_Pers_list[i].keys())]\n",
        "        word_counts = [data[labels[:, i] == val]['word_count'] for val in sorted(b_Pers_list[i].keys())]\n",
        "        sns.boxplot(data=word_counts)\n",
        "        plt.xticks(range(2), dichotomy_labels)\n",
        "        plt.xlabel('Personality Type')\n",
        "        plt.ylabel('Word Count')\n",
        "        plt.show()\n",
        "\n",
        "# Visualize the data\n",
        "visualize_word_count_distribution(data, labels)\n",
        "visualize_word_count_boxplots(data, labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "uXIUXS4JBv_0",
        "outputId": "b5e3480b-6bcf-4029-a1ef-f9845092eef5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 2. Preprocess & Label Extraction\n",
        "posts = preprocess_text(data)\n",
        "labels = extract_dichotomy_labels(data)  # shape: (n_samples, 4)"
      ],
      "metadata": {
        "id": "wazhPnkuog1U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Vectorize\n",
        "X, tfidf_vectorizer = vectorize_text(posts, max_features=1000)"
      ],
      "metadata": {
        "id": "DW-h9Zkhojbc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Train/Test Split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, labels, test_size=0.2, random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "prxbgh7-olE8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. Train Models Individually (no loop over model types)\n",
        "# You can choose to train one model type at a time.\n",
        "print(\"\\nTraining logistic regression models...\")\n",
        "logistic_models = train_dichotomy_models(X_train, y_train, model_type='logistic')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2-sU1tJIonQM",
        "outputId": "7882e4ec-f372-4c03-efdf-018311fea953"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training logistic regression models...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nTraining XGBoost models...\")\n",
        "xgb_models = train_dichotomy_models(X_train, y_train, model_type='xgb')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WTo0Z3T8oo6s",
        "outputId": "77526919-60fa-4682-d97b-f99fc4def72e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training XGBoost models...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [13:24:31] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [13:26:19] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [13:28:00] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n",
            "/usr/local/lib/python3.11/dist-packages/xgboost/core.py:158: UserWarning: [13:29:46] WARNING: /workspace/src/learner.cc:740: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  warnings.warn(smsg, UserWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print(\"\\nTraining SVM models...\")\n",
        "# svm_models = train_dichotomy_models(X_train, y_train, model_type='svm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNJSl85Doqck",
        "outputId": "c54e2e7e-7842-4f45-e8ba-c4db6045ab7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training SVM models...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print(\"\\nTraining Random Forest models...\")\n",
        "# rf_models = train_dichotomy_models(X_train, y_train, model_type='rf')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "LGtN8HhKosL1",
        "outputId": "ccc485bb-987b-40a4-fd9f-1e61beb3ab9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training Random Forest models...\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-91eb285dd297>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nTraining Random Forest models...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrf_models\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_dichotomy_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'rf'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-9-924a96898242>\u001b[0m in \u001b[0;36mtrain_dichotomy_models\u001b[0;34m(X_train, y_train, model_type)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmodel_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'rf'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m         \u001b[0mIE_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'balanced'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         \u001b[0mIE_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_IE_res\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_IE_res\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmodel_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'naivebayes'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0mIE_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGaussianNB\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    485\u001b[0m             \u001b[0;31m# parallel_backend contexts set at a higher level,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    486\u001b[0m             \u001b[0;31m# since correctness does not rely on using threads.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 487\u001b[0;31m             trees = Parallel(\n\u001b[0m\u001b[1;32m    488\u001b[0m                 \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mdelayed_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;32min\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         )\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable_with_config\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1916\u001b[0m             \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_sequential_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1917\u001b[0m             \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1918\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0moutput\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturn_generator\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1920\u001b[0m         \u001b[0;31m# Let's create an ID that uniquely identifies the current call. If the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1845\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_batches\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1846\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_dispatched_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1847\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1848\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_completed_tasks\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1849\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_progress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/utils/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    187\u001b[0m             \u001b[0mcurr_sample_weight\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0mcompute_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"balanced\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         tree._fit(\n\u001b[0m\u001b[1;32m    190\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/tree/_classes.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    470\u001b[0m             )\n\u001b[1;32m    471\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 472\u001b[0;31m         \u001b[0mbuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmissing_values_in_feature_mask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    473\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    474\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print(\"\\nTraining Naive Bayes models...\")\n",
        "# naivebayes_models = train_dichotomy_models(X_train, y_train, model_type='naivebayes')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "76xIsJfQotud",
        "outputId": "82c3bb9c-a7dd-467a-8c7b-68a7cab7556e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training Naive Bayes models...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nTraining ANN models...\")\n",
        "ann_models = train_dichotomy_models(X_train, y_train, model_type='ann')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HYKZ648movXl",
        "outputId": "31625c8d-9195-441c-d822-27056db3950a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training ANN models...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nTraining DBN models...\")\n",
        "dbn_models = train_dichotomy_models(X_train, y_train, model_type='dbn')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3bincJmuow4N",
        "outputId": "03611edb-b7ef-414c-8513-d17ddfcec277"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Training DBN models...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 6. Collect all evaluation results for comparison\n",
        "all_trained_models = {\n",
        "    \"logistic\": logistic_models,\n",
        "    # \"xgb\": xgb_models,\n",
        "    # \"svm\": svm_models,\n",
        "    # \"rf\": rf_models,\n",
        "    # \"naivebayes\": naivebayes_models,\n",
        "    \"ann\": ann_models,\n",
        "    \"dbn\": dbn_models\n",
        "}"
      ],
      "metadata": {
        "id": "by2vDBqaozC2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "evaluation_results = {}\n",
        "for mt, models_dict in all_trained_models.items():\n",
        "    print(f\"\\nEvaluating {mt} models on the test set...\")\n",
        "    scores = evaluate_models(models_dict, X_test, y_test)\n",
        "    evaluation_results[mt] = scores\n",
        "    for d in personality_type:\n",
        "        acc, f1 = scores[d]\n",
        "        print(f\"  {d} -> Accuracy: {acc:.2f}, F1: {f1:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UPCB8ivso1yN",
        "outputId": "678f4ae6-778d-4a61-913d-bb6b17991040"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Evaluating logistic models on the test set...\n",
            "  IE -> Accuracy: 0.86, F1: 0.73\n",
            "  NS -> Accuracy: 0.90, F1: 0.60\n",
            "  FT -> Accuracy: 0.90, F1: 0.92\n",
            "  JP -> Accuracy: 0.84, F1: 0.86\n",
            "\n",
            "Evaluating ann models on the test set...\n",
            "  IE -> Accuracy: 0.89, F1: 0.77\n",
            "  NS -> Accuracy: 0.95, F1: 0.72\n",
            "  FT -> Accuracy: 0.91, F1: 0.93\n",
            "  JP -> Accuracy: 0.86, F1: 0.88\n",
            "\n",
            "Evaluating dbn models on the test set...\n",
            "  IE -> Accuracy: 0.83, F1: 0.71\n",
            "  NS -> Accuracy: 0.89, F1: 0.59\n",
            "  FT -> Accuracy: 0.90, F1: 0.92\n",
            "  JP -> Accuracy: 0.83, F1: 0.85\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "k7p2wA1EAsx8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 7. Plot Comparison Graph (F1 scores)\n",
        "plot_model_comparison(evaluation_results)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "id": "6qbqc7Ezo3pe",
        "outputId": "252919f5-32a2-42e0-e479-081509c66ee4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8. Select best model type per dichotomy (based on F1 score)\n",
        "best_for_each_dichotomy = {}\n",
        "for d in personality_type:\n",
        "    best_model_type = None\n",
        "    best_f1 = 0.0\n",
        "    for mt, scores in evaluation_results.items():\n",
        "        _, f1 = scores[d]\n",
        "        if f1 > best_f1:\n",
        "            best_f1 = f1\n",
        "            best_model_type = mt\n",
        "    best_for_each_dichotomy[d] = best_model_type\n",
        "\n",
        "print(\"\\nBest model type per dichotomy based on F1:\")\n",
        "for d, mt in best_for_each_dichotomy.items():\n",
        "    print(f\"  {d} -> {mt}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yT-GnsL4o5Z2",
        "outputId": "8968d5c9-360a-4b63-b696-6e34f6b10b32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Best model type per dichotomy based on F1:\n",
            "  IE -> ann\n",
            "  NS -> ann\n",
            "  FT -> ann\n",
            "  JP -> ann\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. Create a combined best models dict\n",
        "best_combined_models = {}\n",
        "for d in personality_type:\n",
        "    mt = best_for_each_dichotomy[d]\n",
        "    best_combined_models[d] = all_trained_models[mt][d]"
      ],
      "metadata": {
        "id": "hUja9HyFo7dm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 10. Test prediction on a sample post\n",
        "input_text = \"I love to think about abstract possibilities and reflect quietly on my own.\"\n",
        "prediction = predict_personality(input_text, best_combined_models, tfidf_vectorizer)\n",
        "print(\"\\nBest-Combined Predicted Personality:\", prediction['MBTI'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2datvuwvo9JW",
        "outputId": "6c59574c-c89b-4311-d837-daadd147d68d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Best-Combined Predicted Personality: INFJ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 11. (Optional) Further evaluation and plotting individual dichotomy accuracies\n",
        "def test_and_plot_accuracy(models, X_test, y_test, batch_size=64):\n",
        "    accuracy_results = {}\n",
        "    for d in models.keys():\n",
        "        model = models[d]\n",
        "        idx = personality_type.index(d)\n",
        "        print(f\"Evaluating model for {d} dichotomy...\")\n",
        "        if hasattr(model, \"forward\"):\n",
        "            device = next(model.parameters()).device\n",
        "            X_test_dense = torch.FloatTensor(X_test.toarray()).to(device)\n",
        "            y_test_d = y_test[:, idx]\n",
        "            model.eval()\n",
        "            preds = []\n",
        "            with torch.no_grad():\n",
        "                for j in range(0, X_test_dense.size(0), batch_size):\n",
        "                    batch = X_test_dense[j:j+batch_size]\n",
        "                    outputs = model(batch)\n",
        "                    preds.extend([int(x.item() > 0.5) for x in outputs])\n",
        "            acc = accuracy_score(y_test_d, preds)\n",
        "            print(f\"{d} - Accuracy: {acc:.2f}\")\n",
        "            accuracy_results[d] = acc\n",
        "        else:\n",
        "            y_test_d = y_test[:, idx]\n",
        "            y_pred_d = model.predict(X_test)\n",
        "            acc = accuracy_score(y_test_d, y_pred_d)\n",
        "            print(f\"{d} - Accuracy: {acc:.2f}\")\n",
        "            accuracy_results[d] = acc\n",
        "    return accuracy_results\n",
        "\n",
        "print(\"\\nEvaluating best combined models on test set...\")\n",
        "accuracy_results = test_and_plot_accuracy(best_combined_models, X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hAAW8Q3ypAm3",
        "outputId": "3c7396fa-6b4c-4ace-bc18-8cf4c93c3a13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Evaluating best combined models on test set...\n",
            "Evaluating model for IE dichotomy...\n",
            "IE - Accuracy: 0.89\n",
            "Evaluating model for NS dichotomy...\n",
            "NS - Accuracy: 0.95\n",
            "Evaluating model for FT dichotomy...\n",
            "FT - Accuracy: 0.91\n",
            "Evaluating model for JP dichotomy...\n",
            "JP - Accuracy: 0.86\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "znkn9_fxnZYa",
        "outputId": "aa0d7295-13bc-4ee1-c3b2-eccff1d46e73"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Models saved to models.pkl\n",
            "Vectorizer saved to vectorizer.pkl\n"
          ]
        }
      ],
      "source": [
        "# 12. Save the best combined models and vectorizer for future use\n",
        "save_models_and_vectorizer(best_combined_models, tfidf_vectorizer)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Career prediction"
      ],
      "metadata": {
        "id": "wsKrrMH_l2Pw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "    models, vectorizer = load_models_and_vectorizer(models_path=\"/content/drive/MyDrive/MBIT_data/ANN1/models_ann.pkl\", vectorizer_path=\"/content/drive/MyDrive/MBIT_data/ANN1/vectorizer_ann.pkl\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6NTrL_hMmUmT",
        "outputId": "2411e4aa-fa44-4050-fc10-fff86349f789"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded models from /content/drive/MyDrive/MBIT_data/ANN1/models_ann.pkl\n",
            "Loaded vectorizer from /content/drive/MyDrive/MBIT_data/ANN1/vectorizer_ann.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Career Mapping Based on MBTI ---\n",
        "career_map = {\n",
        "    \"ST\": \"Expert\",      # Technical and structured careers\n",
        "    \"SF\": \"Expert\",      # Stable, people-oriented expertise roles\n",
        "    \"NT\": \"Spiral\",      # Creative and innovative careers\n",
        "    \"NF\": \"Transitory\"   # People-oriented, flexible careers\n",
        "}\n",
        "\n",
        "career_examples = {\n",
        "    \"Linear\": [\"CEO\", \"Corporate Manager\", \"Finance Executive\"],\n",
        "    \"Expert\": [\"Engineer\", \"Scientist\", \"Doctor\", \"Software Developer\"],\n",
        "    \"Spiral\": [\"Entrepreneur\", \"Consultant\", \"Creative Director\"],\n",
        "    \"Transitory\": [\"Freelancer\", \"Artist\", \"Journalist\", \"Digital Nomad\"]\n",
        "}\n",
        "\n",
        "def predict_career(input_text, models, vectorizer):\n",
        "    # Predict personality type\n",
        "    personality_prediction = predict_personality(input_text, models, vectorizer)\n",
        "    mbti_type = personality_prediction[\"MBTI\"]\n",
        "\n",
        "    # Extract S/N and T/F dimensions for career mapping\n",
        "    key = f\"{mbti_type[1]}{mbti_type[2]}\"  # e.g., ST, SF, NT, NF\n",
        "\n",
        "    # Get career pattern\n",
        "    career_pattern = career_map.get(key, \"Unknown\")\n",
        "\n",
        "    # Suggest careers based on the pattern\n",
        "    suggested_careers = career_examples.get(career_pattern, [\"Undefined\"])\n",
        "\n",
        "    return {\n",
        "        \"MBTI Type\": mbti_type,\n",
        "        \"Career Pattern\": career_pattern,\n",
        "        \"Suggested Careers\": suggested_careers\n",
        "    }\n"
      ],
      "metadata": {
        "id": "Klqh6U3TpYyl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_text = \"I love solving problems with data and building scalable applications.\"\n",
        "career_prediction = predict_career(input_text, models, vectorizer)\n",
        "print(career_prediction)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "Oe0ZESgVl-7J",
        "outputId": "6b907210-9a6b-4c7b-d16d-a2406170d9ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'TF'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-3b4e9eba5772>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0minput_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"I love solving problems with data and building scalable applications.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcareer_prediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_career\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvectorizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcareer_prediction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-23-ac28528c1e6c>\u001b[0m in \u001b[0;36mpredict_career\u001b[0;34m(input_text, models, vectorizer)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mpredict_career\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvectorizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m# Predict personality type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mpersonality_prediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_personality\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_text\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvectorizer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m     \u001b[0mmbti_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpersonality_prediction\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"MBTI\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-18-6abcb41f54e9>\u001b[0m in \u001b[0;36mpredict_personality\u001b[0;34m(input_text, models, vectorizer)\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mmbti\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdichotomy\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpersonality_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m         \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdichotomy\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"forward\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m             \u001b[0;31m# For PyTorch models\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'TF'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ----- Job Listings Based on Personality Features -----\n",
        "List_jobs_I = ['Accounting manager',\n",
        "               'Landscape designer',\n",
        "               'Behavioral therapist',\n",
        "               'Graphic designer',\n",
        "               'IT manager']\n",
        "\n",
        "List_jobs_E = ['Flight attendant',\n",
        "               'Event planner',\n",
        "               'Teacher',\n",
        "               'Criminal investigator',\n",
        "               'General manager']\n",
        "\n",
        "List_jobs_S = ['Home health aide',\n",
        "               'Detective',\n",
        "               'Actor',\n",
        "               'Nurse']\n",
        "\n",
        "List_jobs_N = ['Social worker',\n",
        "               'HR manager',\n",
        "               'Counselor',\n",
        "               'Therapist']\n",
        "\n",
        "List_jobs_F = ['Entertainer',\n",
        "               'Mentor',\n",
        "               'Advocate',\n",
        "               'Artist',\n",
        "               'Defender',\n",
        "               'Dreamer']\n",
        "\n",
        "List_jobs_T = ['Video game designer',\n",
        "               'Graphic designer',\n",
        "               'Social media manager',\n",
        "               'Copywriter',\n",
        "               'Public relations manager',\n",
        "               'Digital marketers',\n",
        "               'Lawyer',\n",
        "               'Research scientist',\n",
        "               'User experience designer',\n",
        "               'Software architect']\n",
        "\n",
        "List_jobs_J = ['Showroom designer',\n",
        "               'IT administrator',\n",
        "               'Marketing director',\n",
        "               'Judge',\n",
        "               'Coach']\n",
        "\n",
        "List_jobs_P = ['Museum curator',\n",
        "               'Copywriter',\n",
        "               'Public relations specialist',\n",
        "               'Social worker',\n",
        "               'Medical researcher',\n",
        "               'Office Manager']\n",
        "\n",
        "\n",
        "# ----- Personality Character Lists -----\n",
        "List_ch_I = ['Reflective',\n",
        "             'Self-aware',\n",
        "             'Take time making decisions',\n",
        "             'Feel comfortable being alone',\n",
        "             'Dont like group works']\n",
        "\n",
        "List_ch_E = ['Enjoy social settings',\n",
        "             'Do not like or need a lot of alone time',\n",
        "             'Thrive around people',\n",
        "             'Outgoing and optimistic',\n",
        "             'Prefer to talk out problem or questions']\n",
        "\n",
        "List_ch_S = ['Remember events as snapshots of what actually happened',\n",
        "             'Solve problems by working through facts',\n",
        "             'Programmatic',\n",
        "             'Start with facts and then form a big picture',\n",
        "             'Trust experience first and trust words and symbols less',\n",
        "             'Sometimes pay so much attention to facts, either present or past, that miss new possibilities']\n",
        "\n",
        "List_ch_N = ['Listen to and obey their inner voice',\n",
        "             'Pay attention to their inner dreams',\n",
        "             'Typically optimistic souls',\n",
        "             'Strong sense of purpose',\n",
        "             'Closely observe their surroundings']\n",
        "\n",
        "List_ch_F = ['Decides with heart',\n",
        "             'Dislikes conflict',\n",
        "             'Passionate',\n",
        "             'Driven by emotion',\n",
        "             'Gentle',\n",
        "             'Easily hurt',\n",
        "             'Empathetic',\n",
        "             'Caring of others']\n",
        "\n",
        "List_ch_T = ['Logical',\n",
        "             'Objective',\n",
        "             'Decides with head',\n",
        "             'Wants truth',\n",
        "             'Rational',\n",
        "             'Impersonal',\n",
        "             'Critical',\n",
        "             'Firm with people']\n",
        "\n",
        "List_ch_J = ['Self-disciplined',\n",
        "             'Decisive',\n",
        "             'Structured',\n",
        "             'Organized',\n",
        "             'Responsive',\n",
        "             'Fastidious',\n",
        "             'Create short and long-term plans',\n",
        "             'Make a list of things to do',\n",
        "             'Schedule things in advance',\n",
        "             'Form and express judgments',\n",
        "             'Bring closure to an issue so that we can move on']\n",
        "\n",
        "List_ch_P = ['Relaxed',\n",
        "             'Adaptable',\n",
        "             'Non judgemental',\n",
        "             'Carefree',\n",
        "             'Creative',\n",
        "             'Curious',\n",
        "             'Postpone decisions to see what other options are available',\n",
        "             'Act spontaneously',\n",
        "             'Decide what to do as we do it, rather than forming a plan ahead of time',\n",
        "             'Do things at the last minute']\n",
        "\n",
        "# ----- Career Guidance Function -----\n",
        "def get_personality_guidance(input_text):\n",
        "    \"\"\"\n",
        "    Uses the predicted MBTI type to club together career options and personality\n",
        "    characteristics based on each letter.\n",
        "    \"\"\"\n",
        "    # Predict personality type (dummy function for now)\n",
        "    prediction = predict_personality(input_text,models,vectorizer)\n",
        "    mbti_type = prediction[\"MBTI\"]\n",
        "\n",
        "    # Dictionaries mapping MBTI letter to jobs and characteristics\n",
        "    jobs_dict = {\n",
        "        'I': List_jobs_I,\n",
        "        'E': List_jobs_E,\n",
        "        'S': List_jobs_S,\n",
        "        'N': List_jobs_N,\n",
        "        'F': List_jobs_F,\n",
        "        'T': List_jobs_T,\n",
        "        'J': List_jobs_J,\n",
        "        'P': List_jobs_P\n",
        "    }\n",
        "\n",
        "    ch_dict = {\n",
        "        'I': List_ch_I,\n",
        "        'E': List_ch_E,\n",
        "        'S': List_ch_S,\n",
        "        'N': List_ch_N,\n",
        "        'F': List_ch_F,\n",
        "        'T': List_ch_T,\n",
        "        'J': List_ch_J,\n",
        "        'P': List_ch_P\n",
        "    }\n",
        "\n",
        "    # Aggregate career options and characteristics from each letter of the MBTI type\n",
        "    career_options = []\n",
        "    characteristics = []\n",
        "    for letter in mbti_type:\n",
        "        career_options.extend(jobs_dict.get(letter, []))\n",
        "        characteristics.extend(ch_dict.get(letter, []))\n",
        "\n",
        "    # Remove duplicates and sort the lists for readability\n",
        "    career_options = sorted(set(career_options))\n",
        "    characteristics = sorted(set(characteristics))\n",
        "\n",
        "    guidance = {\n",
        "        \"MBTI Type\": mbti_type,\n",
        "        \"Career Options\": career_options,\n",
        "        \"Personality Characteristics\": characteristics\n",
        "    }\n",
        "    return guidance\n",
        "\n",
        "\n",
        "# ----- Example Usage & Nicely Formatted Output -----\n",
        "if __name__ == '__main__':\n",
        "    sample_input = \"I enjoy problem solving, independent work, and logical analysis.\"\n",
        "    guidance = get_personality_guidance(sample_input)\n",
        "\n",
        "    # Print the guidance in a clean, readable format\n",
        "    print(\"=== Personality Guidance ===\")\n",
        "    print(f\"MBTI Type: {guidance['MBTI Type']}\\n\")\n",
        "\n",
        "    print(\"Career Options:\")\n",
        "    for job in guidance[\"Career Options\"]:\n",
        "        print(f\"  - {job}\")\n",
        "\n",
        "    print(\"\\nPersonality Characteristics:\")\n",
        "    for trait in guidance[\"Personality Characteristics\"]:\n",
        "        print(f\"  - {trait}\")\n"
      ],
      "metadata": {
        "id": "PicLc10koIN7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75149e6b-7ffb-42b9-bde4-1cf360742a6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Personality Guidance ===\n",
            "MBTI Type: ENTJ\n",
            "\n",
            "Career Options:\n",
            "  - Coach\n",
            "  - Copywriter\n",
            "  - Counselor\n",
            "  - Criminal investigator\n",
            "  - Digital marketers\n",
            "  - Event planner\n",
            "  - Flight attendant\n",
            "  - General manager\n",
            "  - Graphic designer\n",
            "  - HR manager\n",
            "  - IT administrator\n",
            "  - Judge\n",
            "  - Lawyer\n",
            "  - Marketing director\n",
            "  - Public relations manager\n",
            "  - Research scientist\n",
            "  - Showroom designer\n",
            "  - Social media manager\n",
            "  - Social worker\n",
            "  - Software architect\n",
            "  - Teacher\n",
            "  - Therapist\n",
            "  - User experience designer\n",
            "  - Video game designer\n",
            "\n",
            "Personality Characteristics:\n",
            "  - Bring closure to an issue so that we can move on\n",
            "  - Closely observe their surroundings\n",
            "  - Create short and long-term plans\n",
            "  - Critical\n",
            "  - Decides with head\n",
            "  - Decisive\n",
            "  - Do not like or need a lot of alone time\n",
            "  - Enjoy social settings\n",
            "  - Fastidious\n",
            "  - Firm with people\n",
            "  - Form and express judgments\n",
            "  - Impersonal\n",
            "  - Listen to and obey their inner voice\n",
            "  - Logical\n",
            "  - Make a list of things to do\n",
            "  - Objective\n",
            "  - Organized\n",
            "  - Outgoing and optimistic\n",
            "  - Pay attention to their inner dreams\n",
            "  - Prefer to talk out problem or questions\n",
            "  - Rational\n",
            "  - Responsive\n",
            "  - Schedule things in advance\n",
            "  - Self-disciplined\n",
            "  - Strong sense of purpose\n",
            "  - Structured\n",
            "  - Thrive around people\n",
            "  - Typically optimistic souls\n",
            "  - Wants truth\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "import pandas as pd\n",
        "from imblearn.over_sampling import RandomOverSampler\n",
        "\n",
        "# Define a mapping for each personality dichotomy:\n",
        "# For example, for the IE dichotomy, 0 represents \"I\" and 1 represents \"E\".\n",
        "personality_labels = {\n",
        "    \"IE\": {0: \"I\", 1: \"E\"},\n",
        "    \"NS\": {0: \"N\", 1: \"S\"},\n",
        "    \"FT\": {0: \"F\", 1: \"T\"},\n",
        "    \"JP\": {0: \"J\", 1: \"P\"}\n",
        "}\n",
        "\n",
        "def print_balancing_summary(X, y):\n",
        "    \"\"\"\n",
        "    For each personality dichotomy, prints the number of samples (posts)\n",
        "    in each group before and after balancing.\n",
        "\n",
        "    Parameters:\n",
        "      X: The feature matrix (e.g., text vectorization result).\n",
        "      y: The label matrix of shape (n_samples, 4) where each column corresponds\n",
        "         to a dichotomy (e.g., IE, NS, FT, JP).\n",
        "    \"\"\"\n",
        "    print(\"Summary of Balancing Effect on Personality Categories\")\n",
        "    print(\"=\" * 60)\n",
        "\n",
        "    oversampler = RandomOverSampler(random_state=42)\n",
        "    dichotomies = [\"IE\", \"NS\", \"FT\", \"JP\"]\n",
        "\n",
        "    for i, dichotomy in enumerate(dichotomies):\n",
        "        labels = personality_labels[dichotomy]\n",
        "        # Get the labels for the current dichotomy\n",
        "        y_d = y[:, i]\n",
        "        # Count samples before balancing\n",
        "        count_before = Counter(y_d)\n",
        "        # Balance the classes using oversampling\n",
        "        _, y_res = oversampler.fit_resample(X, y_d)\n",
        "        # Count samples after balancing\n",
        "        count_after = Counter(y_res)\n",
        "\n",
        "        print(f\"\\nFor personality dichotomy {dichotomy} ({labels[0]} vs {labels[1]}):\")\n",
        "        print(f\"  Before balancing: {labels[0]} = {count_before.get(0, 0)} samples, \"\n",
        "              f\"{labels[1]} = {count_before.get(1, 0)} samples\")\n",
        "        print(f\"  After balancing:  {labels[0]} = {count_after.get(0, 0)} samples, \"\n",
        "              f\"{labels[1]} = {count_after.get(1, 0)} samples\")\n",
        "\n",
        "    print(\"=\" * 60)\n",
        "    print(\"Balancing complete. The oversampling process has equalized the number of samples for each group.\")\n",
        "\n",
        "# Example usage:\n",
        "# Assuming X_train and y_train have been defined from your train-test split:\n",
        "print_balancing_summary(X_train, y_train)\n"
      ],
      "metadata": {
        "id": "jePKSBZyfrHn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d639f13-79d5-4b14-f99e-468a05689a61"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Summary of Balancing Effect on Personality Categories\n",
            "============================================================\n",
            "\n",
            "For personality dichotomy IE (I vs E):\n",
            "  Before balancing: I = 64543 samples, E = 20310 samples\n",
            "  After balancing:  I = 64543 samples, E = 64543 samples\n",
            "\n",
            "For personality dichotomy NS (N vs S):\n",
            "  Before balancing: N = 77488 samples, S = 7365 samples\n",
            "  After balancing:  N = 77488 samples, S = 77488 samples\n",
            "\n",
            "For personality dichotomy FT (F vs T):\n",
            "  Before balancing: F = 29550 samples, T = 55303 samples\n",
            "  After balancing:  F = 55303 samples, T = 55303 samples\n",
            "\n",
            "For personality dichotomy JP (J vs P):\n",
            "  Before balancing: J = 35531 samples, P = 49322 samples\n",
            "  After balancing:  J = 49322 samples, P = 49322 samples\n",
            "============================================================\n",
            "Balancing complete. The oversampling process has equalized the number of samples for each group.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# ---------- Graph 1: Dataset Capacity by MBTI Dichotomy ----------\n",
        "# Data: Total samples per MBTI category (from dataset details)\n",
        "categories = {\n",
        "    'IE': {'Introversion': 81626, 'Extraversion': 24441},\n",
        "    'NS': {'Intuition': 91432, 'Sensing': 14635},\n",
        "    'FT': {'Feeling': 57392, 'Thinking': 48675},\n",
        "    'JP': {'Judging': 41987, 'Perceiving': 64080}\n",
        "}\n",
        "\n",
        "# Create a grouped bar chart for capacity\n",
        "dichotomies = list(categories.keys())\n",
        "n_groups = len(dichotomies)\n",
        "labels1, labels2 = [], []\n",
        "values1, values2 = [], []\n",
        "\n",
        "for d in dichotomies:\n",
        "    sub = categories[d]\n",
        "    keys = list(sub.keys())\n",
        "    labels1.append(keys[0])\n",
        "    labels2.append(keys[1])\n",
        "    values1.append(sub[keys[0]])\n",
        "    values2.append(sub[keys[1]])\n",
        "\n",
        "bar_width = 0.35\n",
        "index = np.arange(n_groups)\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "plt.bar(index, values1, bar_width, label=labels1[0], color='skyblue')\n",
        "plt.bar(index + bar_width, values2, bar_width, label=labels2[0], color='salmon')\n",
        "plt.xlabel('MBTI Dichotomy')\n",
        "plt.ylabel('Number of Samples')\n",
        "plt.title('Dataset Capacity by MBTI Dichotomy')\n",
        "plt.xticks(index + bar_width/2, dichotomies)\n",
        "plt.legend([labels1[0] + ' / ' + labels2[0]], loc='upper right')\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# ---------- Graph 2: Performance Using CountVectorizer ----------\n",
        "# Data for CountVectorizer (each dichotomy: IE, NS, FT, JP)\n",
        "df_count = pd.DataFrame({\n",
        "    'Dichotomy': ['IE','NS','FT','JP'],\n",
        "    'Accuracy': [0.7147, 0.7649, 0.8166, 0.7082],\n",
        "    'Precision': [0.4436, 0.2336, 0.9040, 0.7597],\n",
        "    'Recall': [0.7530, 0.7527, 0.8057, 0.7271],\n",
        "    'F1': [0.5583, 0.3566, 0.8520, 0.7431]\n",
        "})\n",
        "metrics = ['Accuracy', 'Precision', 'Recall', 'F1']\n",
        "x = np.arange(len(df_count['Dichotomy']))\n",
        "width = 0.2\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "for i, metric in enumerate(metrics):\n",
        "    plt.bar(x + i*width, df_count[metric], width, label=metric)\n",
        "plt.xlabel('MBTI Dichotomy')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Performance Metrics using CountVectorizer')\n",
        "plt.xticks(x + width*1.5, df_count['Dichotomy'])\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# ---------- Graph 3: Performance Using TfidfVectorizer ----------\n",
        "df_tfidf = pd.DataFrame({\n",
        "    'Dichotomy': ['IE','NS','FT','JP'],\n",
        "    'Accuracy': [0.7045, 0.7536, 0.7987, 0.6874],\n",
        "    'Precision': [0.4281, 0.2206, 0.8838, 0.7538],\n",
        "    'Recall': [0.6970, 0.7293, 0.7976, 0.6851],\n",
        "    'F1': [0.5304, 0.3387, 0.8385, 0.7178]\n",
        "})\n",
        "\n",
        "x = np.arange(len(df_tfidf['Dichotomy']))\n",
        "plt.figure(figsize=(10,6))\n",
        "for i, metric in enumerate(metrics):\n",
        "    plt.bar(x + i*width, df_tfidf[metric], width, label=metric)\n",
        "plt.xlabel('MBTI Dichotomy')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Performance Metrics using TfidfVectorizer')\n",
        "plt.xticks(x + width*1.5, df_tfidf['Dichotomy'])\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# ---------- Graph 4: Performance Using HashingVectorizer ----------\n",
        "df_hash = pd.DataFrame({\n",
        "    'Dichotomy': ['IE','NS','FT','JP'],\n",
        "    'Accuracy': [0.7107, 0.7705, 0.7936, 0.6771],\n",
        "    'Precision': [0.4346, 0.2349, 0.8790, 0.7437],\n",
        "    'Recall': [0.6909, 0.7320, 0.7943, 0.6768],\n",
        "    'F1': [0.5336, 0.3557, 0.8345, 0.7087]\n",
        "})\n",
        "\n",
        "x = np.arange(len(df_hash['Dichotomy']))\n",
        "plt.figure(figsize=(10,6))\n",
        "for i, metric in enumerate(metrics):\n",
        "    plt.bar(x + i*width, df_hash[metric], width, label=metric)\n",
        "plt.xlabel('MBTI Dichotomy')\n",
        "plt.ylabel('Score')\n",
        "plt.title('Performance Metrics using HashingVectorizer')\n",
        "plt.xticks(x + width*1.5, df_hash['Dichotomy'])\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# ---------- Graphs 5-8: Model Comparison for Each Dichotomy ----------\n",
        "# For each dichotomy, we have models: RF, XGBoost, XGBoost-Hypertuned, SGD, LR, ANN\n",
        "models = ['RF', 'XGBoost', 'XGBoost-Hypertuned', 'SGD', 'LR', 'ANN']\n",
        "\n",
        "# Data for Introversion/Extraversion\n",
        "df_IE = pd.DataFrame({\n",
        "    'Model': models,\n",
        "    'F1': [68.55, 70.01, 70.15, 70.72, 73.12, 77.33],\n",
        "    'Recall': [77.64, 75.52, 77.54, 76.77, 77.65, 77.62],\n",
        "    'Precision': [66.39, 68.32, 71.01, 70.13, 71.92, 71.54],\n",
        "    'Accuracy': [77.64, 75.52, 77.54, 76.77, 86.12, 89.63]\n",
        "})\n",
        "# Data for Intuition/Sensing\n",
        "df_NS = pd.DataFrame({\n",
        "    'Model': models,\n",
        "    'F1': [78.84, 79.85, 79.71, 79.57, 60.40, 72.54],\n",
        "    'Recall': [85.52, 85.47, 85.78, 86.03, 86.10, 85.52],\n",
        "    'Precision': [73.13, 77.84, 77.79, 74.01, 84.56, 85.47],\n",
        "    'Accuracy': [85.52, 85.47, 85.78, 86.03, 90.12, 95.24]\n",
        "})\n",
        "# Data for Feeling/Thinking\n",
        "df_FT = pd.DataFrame({\n",
        "    'Model': models,\n",
        "    'F1': [67.88, 68.06, 69.36, 71.75, 92.34, 93.12],\n",
        "    'Recall': [68.27, 68.11, 69.51, 72.09, 72.55, 72.50],\n",
        "    'Precision': [68.25, 68.05, 69.42, 72.24, 72.48, 72.23],\n",
        "    'Accuracy': [68.27, 68.11, 69.51, 72.09, 90.34, 91.45]\n",
        "})\n",
        "# Data for Judging/Perceiving\n",
        "df_JP = pd.DataFrame({\n",
        "    'Model': models,\n",
        "    'F1': [52.46, 59.87, 61.47, 61.91, 86.56, 88.76],\n",
        "    'Recall': [59.89, 61.33, 64.20, 64.48, 64.58, 64.48],\n",
        "    'Precision': [55.31, 59.77, 62.72, 63.07, 63.20, 63.30],\n",
        "    'Accuracy': [59.89, 61.33, 64.20, 64.48, 84.23, 86.29]\n",
        "})\n",
        "\n",
        "def plot_model_comparison(df, title):\n",
        "    x = np.arange(len(df['Model']))\n",
        "    width = 0.2\n",
        "    plt.figure(figsize=(10,6))\n",
        "    for i, metric in enumerate(metrics):\n",
        "        plt.bar(x + i*width, df[metric], width, label=metric)\n",
        "    plt.xlabel('Model')\n",
        "    plt.ylabel('Percentage')\n",
        "    plt.title(title)\n",
        "    plt.xticks(x + width*1.5, df['Model'])\n",
        "    plt.legend()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Plot each dichotomy model comparison:\n",
        "plot_model_comparison(df_IE, 'Model Comparison: Introversion/Extraversion')\n",
        "plot_model_comparison(df_NS, 'Model Comparison: Intuition/Sensing')\n",
        "plot_model_comparison(df_FT, 'Model Comparison: Feeling/Thinking')\n",
        "plot_model_comparison(df_JP, 'Model Comparison: Judging/Perceiving')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "AWNmwe6vKxJi",
        "outputId": "cd358ac8-5f49-404a-9eab-240dfdabb40d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAVb1JREFUeJzt3XlYVOX///HXADJsAioCoiQY7qIWLpmaqeSapeaSWYJrqbhkfj5pmaCWlJVZruWGLZhLaaZmJrmkWZZ+NCs0N9TKBTU3TFBmfn/0Y76OIAJymNDn47rmupr73Oec95nhjL3mvs8Zk9VqtQoAAAAAABQ6J0cXAAAAAADA7YrQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN0AAAAAABiE0A0AAAAAgEEI3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAP9ir7/+uipVqiRnZ2fVrVvX0eXAANHR0QoJCXF0GQVSnGu/FXFxcTKZTDp16tRN+4aEhCg6Otr4om4zGzZskMlk0oYNGxxdCgDcMkI3AORDQkKCTCaT7eHm5qYqVaooJiZGJ06cKNR9rV27Vv/973/VuHFjzZ8/XxMnTizU7d9poqOjZTKZ5O3trb///jvb8n379tne1zfeeCPf27906ZLi4uIICUXkwQcfVK1atXJclpKSUuD3sbgZOnSoTCaT9u/ff8M+L774okwmk3766adC3feMGTOUkJBQqNsEgNuRi6MLAIDiaPz48QoNDdXly5e1efNmzZw5U6tXr9bPP/8sDw+PQtnH119/LScnJ82dO1eurq6Fss07nYuLiy5duqTPP/9c3bp1s1v20Ucfyc3NTZcvXy7Qti9duqRx48ZJ+icQ5tXs2bNlsVgKtE9HK861F5W9e/fKycm4MY6ePXtq6tSpSkxM1NixY3Pss3DhQoWHh6t27dqFuu8ZM2bIz8/PkJH8Bx54QH///TeffQBuC4x0A0ABtG3bVk8++aT69eunhIQEDR8+XIcOHdJnn312y9u+dOmSJOnkyZNyd3cvtP/ptFqtOY7w3knMZrNatmyphQsXZluWmJio9u3bF1ktaWlpkqQSJUrIbDYX2X4LU3GuvaiYzWaVKFHCsO03bNhQYWFhOf5NS9LWrVt16NAh9ezZ07AaCtPly5dlsVjk5OQkNzc3Q7+wuF7WZy8AFDZCNwAUghYtWkiSDh06ZGv78MMPFRERIXd3d5UuXVqPP/64jh49arde1hTZ7du364EHHpCHh4deeOEFmUwmzZ8/X2lpabYpz1nTOK9evaoJEybo7rvvltlsVkhIiF544QWlp6fbbTskJEQPP/ywvvzyS9WrV0/u7u569913bddKLl68WOPGjVP58uVVsmRJdenSRefOnVN6erqGDx8uf39/eXl5qXfv3tm2PX/+fLVo0UL+/v4ym82qUaOGZs6cme11yaph8+bNatCggdzc3FSpUiW9//772fqePXtWzz77rEJCQmQ2m1WhQgX16tXL7rrZ9PR0xcbGKiwsTGazWcHBwfrvf/+brb7cPPHEE/riiy909uxZW9sPP/ygffv26YknnshxnbNnz2r48OEKDg6W2WxWWFiYXnvtNdsob0pKisqWLStJGjdunO09i4uLk/TP1HYvLy8dOHBA7dq1U8mSJW0hKKfroi0Wi95++22Fh4fLzc1NZcuWVZs2bfTjjz/a+nz11Vdq0qSJfH195eXlpapVq+qFF17I9dizpl3nNCX42nol6cKFCxo+fLjt/fD399dDDz2kHTt22PpcX/u107rfe+89299o/fr19cMPP2Tb55IlS1SjRg25ubmpVq1aWrZsmWHXiZ85c0YjR45UeHi4vLy85O3trbZt22rXrl3Z+k6dOlU1a9aUh4eHSpUqpXr16ikxMTFbv7Nnzyo6Olq+vr7y8fFR7969swW366/pzrpEZcuWLRoxYoTKli0rT09PderUSampqXbrWiwWxcXFKSgoSB4eHmrevLl+/fXXbNvs2bOn9uzZY/feZElMTJTJZFKPHj0k5e8c+vDDD9WgQQPb6/DAAw9o7dq1tuP65ZdftHHjRtvf+7UzPA4ePKiuXbuqdOnS8vDw0H333adVq1bZbT/rs+jjjz/WmDFjVL58eXl4eOj8+fPZrum+/tKeax/Xzyy5lc9eADAC08sBoBAcOHBAklSmTBlJ0iuvvKKXXnpJ3bp1U79+/ZSamqqpU6fqgQce0P/+9z/5+vra1j19+rTatm2rxx9/XE8++aQCAgJUr149vffee9q2bZvmzJkjSbr//vslSf369dOCBQvUpUsXPffcc/r+++8VHx+v5ORkLVu2zK6uvXv3qkePHnr66afVv39/Va1a1bYsPj5e7u7uGjVqlPbv36+pU6eqRIkScnJy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civHWdivUdaN7j755BNNnz5dn3/+uS5cuGB31/LCPIcKU34+A7dt26Zhw4apX79+GjBggN2yovjsBYCCIHQDQCG7++67ZbVaFRoamudAllcVK1aUxWLRvn37bKNG0j83Ljp79qwqVqxYqPvLyeeff6709HStWLHCbrQuP9O7r3f33Xfr559/vmmfXbt2qWXLlnn+0iE3TzzxhObNmycnJyc9/vjjue734sWLOY6oXqswasra35dffqkzZ87kOtrt5OSkli1bqmXLlpo8ebImTpyoF198UevXr79hrVkjntfeuV1SthkSWcqVK6dBgwZp0KBBOnnypO6991698sorNw3dN5P1d7p///5sy3JqKwxLly5V8+bNNXfuXLv2s2fPys/Pz67N09NT3bt3V/fu3ZWRkaHOnTvrlVde0ejRo+Xm5mZIfde79jW6diT49OnTOd4oTvrnhmpr1qzRF198ocTERHl7e6tDhw625Xk9h+6++25ZLBb9+uuvqlu37g373WgbFStW1N69e7O179mzx+7Y8is1NVVdunRR3bp1NX369BzrNuqzFwBuBdd0A0Ah69y5s5ydnTVu3Lhso1ZWq1WnT58u8LbbtWsnSZoyZYpde9bIVVH8znTWCNK1x3bu3DnNnz+/wNt87LHHtGvXrmx3X792P926ddMff/yh2bNnZ+vz999/2373Oq+aN2+uCRMmaNq0abZrQnPSrVs3bd26VV9++WW2ZWfPnrVd6551N/LrA21+PfbYY7JardlGVaX/ey3OnDmTbVlWOMrt59O8vb3l5+eX7Tr0GTNm2D3PzMzMdm2+v7+/goKC8vXzbDcSFBSkWrVq6f3339fFixdt7Rs3btTu3btvefs5cXZ2znY+LlmyRH/88Ydd2/Xnp6urq2rUqCGr1aorV64YUltOWrZsKRcXl2w/xTdt2rQbrtOxY0d5eHhoxowZ+uKLL9S5c2e7Lwnyeg517NhRTk5OGj9+fLaZK9e+hp6enjn+vbdr107btm3T1q1bbW1paWl67733FBISUqBp65mZmXr88ceVkZGhTz75JMdp4UZ+9gLArWCkGwAK2d13362XX35Zo0ePVkpKijp27KiSJUvq0KFDWrZsmQYMGKCRI0cWaNt16tRRVFSU3nvvPZ09e1bNmjXTtm3btGDBAnXs2FHNmzcv5KPJrlWrVnJ1dVWHDh30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27dXQkKC3fLPP/9c9evXl5ubm/z8/NSpUyfbsvT0dD3//PMKDg6W2WxWWFiY5s6dK0lKSEiQr6+v3baWL19ud8OyuLg41a1bV3PmzFFoaKjc3NwkSWvWrFGTJk3k6+urMmXK6OGHH9aBAwfstvX777+rR48eKl26tDw9PVWvXj19//33SklJkZOTk3788Ue7/lOmTFHFihVlsVhu9SW7IUI3AAAAAMDO4sWLVa1aNVWtWlVPPvmk5s2bJ6vVKklatWqVOnXqpHbt2ul///ufkpKS1KBBA9u6vXr10sKFC/XOO+8oOTlZ7777rry8vPK1//379+uTTz7Rp59+qp07d0qS0tLSNGLECP34449KSkqSk5OTOnXqZAvMFy9eVLNmzfTHH39oxYoV2rVrl/773//KYrEoJCREkZGRmj9/vt1+5s+fr+joaDk5GReNuaYbAAAAAGBn7ty5evLJJyVJbdq00blz57Rx40Y9+OCDeuWVV/T4449r3Lhxtv516tSRJP32229avHixvvrqK0VGRkqSKlWqlO/9Z2Rk6P3331fZsmVtbY899phdn3nz5qls2bL69ddfVatWLSUmJio1NVU//PCDSpcuLUkKCwuz9e/Xr5+eeeYZTZ48WWazWTt27NDu3bv12Wef5bu+/GCkGwAAAABgs3fvXm3btk09evSQJLm4uKh79+62KeI7d+5Uy5Ytc1x3586dcnZ2VrNmzW6phooVK9oFbknat2+fevTooUqVKsnb21shISGSpCNHjtj2fc8999gC9/U6duwoZ2dnLVu2TNI/U92bN29u245RGOkGAAAAANjMnTtXV69eVVBQkK3NarXKbDZr2rRpcnd3v+G6uS2TJCcnJ9s09SxXrlzJ1s/T0zNbW4cOHVSxYkXNnj1bQUFBslgsqlWrlu1Gazfbt6urq3r16qX58+erc+fOSkxM1Ntvv53rOoWBkW4AAAAAgCTp6tWrev/99/Xmm29q586dtseuXbsUFBSkhQsXqnbt2kpKSspx/fDwcFksFm3cuDHH5WXLltWFCxeUlpZma8u6Zjs3p0+f1t69ezVmzBi1bNlS1atX119//WXXp3bt2tq5c6fOnDlzw+3069dP69at04wZM3T16lV17tz5pvu+VYx0AwAAAAAkSStXrtRff/2lvn37ysfHx27ZY489prlz5+r1119Xy5Ytdffdd+vxxx/X1atXtXr1aj3//PMKCQlRVFSU+vTpo3feeUd16tTR4cOHdfLkSXXr1k0NGzaUh4eHXnjhBQ0dOlTff/99tjuj56RUqVIqU6aM3nvvPZUrV05HjhzRqFGj7Pr06NFDEydOVMeOHRUfH69y5crpf//7n4KCgtSoUSNJUvXq1XXffffp+eefV58+fW46Ol4YGOkGAAAAAEj6Z2p5ZGRktsAt/RO6f/zxR5UuXVpLlizRihUrVLduXbVo0ULbtm2z9Zs5c6a6dOmiQYMGqVq1aurfv79tZLt06dL68MMPtXr1aoWHh2vhwoWKi4u7aV1OTk76+OOPtX37dtWqVUvPPvusXn/9dbs+rq6uWrt2rfz9/dWuXTuFh4fr1VdflbOzs12/vn37KiMjQ3369CnAK5R/Juv1E+pvc+fPn5ePj4/OnTsnb29vR5cDAAD+7eKy/4/nv1rcOUdXAOD/u3z5sg4dOmT3W9NwvAkTJmjJkiX66aefbto3t/cwr9mSkW4AAAAAwG3v4sWL+vnnnzVt2jQNGTKkyPZL6AYAAAAA3PZiYmIUERGhBx98sMimlkvcSA0AAAAAcAdISEjI003bChsj3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN0AAAAAABiE0A0AAAAAgEEI3QAAAAAAhzKZTFq+fHmh9/034He6AQAAAKAoxfkU8f7O5at7dHS0FixYIEkqUaKE7rrrLvXq1UsvvPCCXFyMiZDHjh1TqVKlCr3vvwGhGwAAAABgp02bNpo/f77S09O1evVqDR48WCVKlNDo0aPt+mVkZMjV1fWW9xcYGGhI338DppcDAAAAAOyYzWYFBgaqYsWKGjhwoCIjI7VixQpFR0erY8eOeuWVVxQUFKSqVatKko4ePapu3brJ19dXpUuX1qOPPqqUlBS7bc6bN081a9aU2WxWuXLlFBMTY1t27ZTxjIwMxcTEqFy5cnJzc1PFihUVHx+fY19J2r17t1q0aCF3d3eVKVNGAwYM0MWLF23Ls2p+4403VK5cOZUpU0aDBw/WlStXCv+FywGhGwAAAACQK3d3d2VkZEiSkpKStHfvXn311VdauXKlrly5otatW6tkyZL65ptvtGXLFnl5ealNmza2dWbOnKnBgwdrwIAB2r17t1asWKGwsLAc9/XOO+9oxYoVWrx4sfbu3auPPvpIISEhOfZNS0tT69atVapUKf3www9asmSJ1q1bZxfoJWn9+vU6cOCA1q9frwULFighIUEJCQmF9vrkhunlAAAAAIAcWa1WJSUl6csvv9SQIUOUmpoqT09PzZkzxzat/MMPP5TFYtGcOXNkMpkkSfPnz5evr682bNigVq1a6eWXX9Zzzz2nYcOG2bZdv379HPd55MgRVa5cWU2aNJHJZFLFihVvWF9iYqIuX76s999/X56enpKkadOmqUOHDnrttdcUEBAgSSpVqpSmTZsmZ2dnVatWTe3bt1dSUpL69+9fKK9TbhjpBgAAAADYWblypby8vOTm5qa2bduqe/fuiouLkySFh4fbXce9a9cu7d+/XyVLlpSXl5e8vLxUunRpXb58WQcOHNDJkyf1559/qmXLlnnad3R0tHbu3KmqVatq6NChWrt27Q37Jicnq06dOrbALUmNGzeWxWLR3r17bW01a9aUs7Oz7Xm5cuV08uTJvL4ct4SRbgAAAACAnebNm2vmzJlydXVVUFCQ3V3Lrw24knTx4kVFREToo48+yradsmXLyskpf2O99957rw4dOqQvvvhC69atU7du3RQZGamlS5cW7GD0z13Yr2UymWSxWAq8vfwgdAMAAAAA7Hh6et7wmuvr3XvvvVq0aJH8/f3l7e2dY5+QkBAlJSWpefPmedqmt7e3unfvru7du6tLly5q06aNzpw5o9KlS9v1q169uhISEpSWlmb7MmDLli1ycnKy3eTN0ZheDgAAAAAosJ49e8rPz0+PPvqovvnmGx06dEgbNmzQ0KFD9fvvv0uS4uLi9Oabb+qdd97Rvn37tGPHDk2dOjXH7U2ePFkLFy7Unj179Ntvv2nJkiUKDAyUr69vjvt2c3NTVFSUfv75Z61fv15DhgzRU089Zbue29EI3QAAAACAAvPw8NCmTZt01113qXPnzqpevbr69u2ry5cv20a+o6KiNGXKFM2YMUM1a9bUww8/rH379uW4vZIlS2rSpEmqV6+e6tevr5SUFK1evTrHaeoeHh768ssvdebMGdWvX19dunRRy5YtNW3aNEOPOT9MVqvV6ugiitL58+fl4+Ojc+fO3XDqAwAAgE2cj6MryJ+4c46uAMD/d/nyZR06dEihoaFyc3NzdDkogNzew7xmS0a6AQAAAAAwCKEbAAAAAACDELoBAAAAADAI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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAYFNJREFUeJzt3XlYFeX///HXYTsgCAgqSiGgkuK+ZqbmhuGaC+VSlltq5ZJplpYZmru5ZK6VovbRFtPMzNQktSx3RdMUlzQrt9xQUEBhfn/443w7gabIsPl8XNe56txzz8x7zhmQ17ln7mMxDMMQAAAAAADIcg45XQAAAAAAAPkVoRsAAAAAAJMQugEAAAAAMAmhGwAAAAAAkxC6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJoRsAAAAAAJMQugEAAAAAMAmhGwBwTywWiyIjI+96vePHj8tisWj+/PlZXlN+FBQUpK5du+Z0GXlKZGSkLBbLHfWdP3++LBaLjh8/bm5RedDdvI4AgPQI3QCQD6QFBovFok2bNqVbbhiGAgICZLFY1LJlyxyo8N6dOXNGr776qsqWLasCBQrI3d1d1atX16hRo3Tp0qWcLg8ZCAoKyvT5tmrVqkx9mPNfxowZo+XLl2f5du9WRESEmjdvbnu+adMmNWvWTA888IBcXV1VokQJtWrVSosXL87BKgEAWYHQDQD5iKura4Z/pG/cuFF//vmnrFZrDlR177Zv364KFSpoxowZqlevniZPnqxJkyapatWqGjdunNq3b5/TJZouNjZWH374YU6XkW1WrVqlESNG3NM2hg0bpmvXrtm13Sp0P/vss7p27ZoCAwPvaZ934vr16/ruu+/UokULSdKSJUv02GOP6cyZM3r55Zf1/vvvq3Pnzrp48WKueM8zeh0BAHfOKacLAABknebNm2vJkiWaNm2anJz+71f84sWLVb16dZ07dy4Hq8ucS5cuqW3btnJ0dNTu3btVtmxZu+WjR4/OFcHEDIZhKDExUW5ubnn2A5Oc5OTkZPdzcDuOjo5ydHQ0uaKbfvzxR125csUWuiMjI1WuXDlt2bJFLi4udn3Pnj2bLTXdzt28jgCA9BjpBoB8pFOnTjp//ry+++47W1tycrK++OILPf300xmuk5CQoEGDBikgIEBWq1VlypTRu+++K8Mw7PolJSXplVdeUZEiRVSwYEE98cQT+vPPPzPc5l9//aXu3bvLz89PVqtV5cuX17x58zJ1THPmzNFff/2lyZMnpwvckuTn56dhw4bZtc2cOVPly5eX1WqVv7+/+vTpk+4S9AYNGqhChQrau3ev6tevrwIFCqh06dL64osvJN28OqBWrVpyc3NTmTJltG7dOrv10+5zPXjwoNq3by9PT0/5+vrq5ZdfVmJiol3fqKgoNWrUSEWLFpXValW5cuU0a9asdMeSdjn2mjVrVKNGDbm5uWnOnDm2Zf+8p/v69esaMWKEQkJC5OrqKl9fX9WtW9fuvZek77//XvXq1ZO7u7u8vb3VunVrHThwIMNjOXLkiLp27Spvb295eXmpW7duunr1ql3fc+fO6eDBg+na70TaffzvvvuuPvjgA5UqVUpWq1U1a9bU9u3bbf26du2qGTNmSJLttom0e4o3bNggi8WiDRs2ZLjtf84R8O97kS0WixISErRgwQLbNtNe01vd030359Kvv/6qhg0bqkCBAnrggQc0YcKEDF+Hb775RuXKlVNQUJAk6ejRo6pZs2a6wC1JRYsWtXuempqqqVOnqnz58nJ1dZWfn5969+6tixcv2vVLO5c2bdqkhx9+WK6uripZsqQWLlxo1+9OzqOM7um2WCzq27evli9frgoVKth+zlevXp3uGDZs2KAaNWrI1dVVpUqV0pw5c7hPHMB9hdANAPlIUFCQateurU8++cTW9u233youLk4dO3ZM198wDD3xxBOaMmWKmjZtqsmTJ6tMmTIaPHiwBg4caNf3+eef19SpU/X4449r3LhxcnZ2to3U/dOZM2f0yCOPaN26derbt6/ee+89lS5dWj169NDUqVPv+phWrFghNzc3Pfnkk3fUPzIyUn369JG/v78mTZqkiIgIzZkzR48//riuX79u1/fixYtq2bKlatWqpQkTJshqtapjx4767LPP1LFjRzVv3lzjxo1TQkKCnnzySV25ciXd/tq3b6/ExESNHTtWzZs317Rp09SrVy+7PrNmzVJgYKDeeOMNTZo0SQEBAXrppZdswfKfYmNj1alTJzVp0kTvvfeeqlSpcsvjHDFihBo2bKjp06frzTffVIkSJbRr1y5bn3Xr1ik8PFxnz55VZGSkBg4cqJ9//ll16tTJcMKw9u3b68qVKxo7dqzat2+v+fPnp7vEe/r06QoNDdW2bdtu9Rb8p8WLF2vixInq3bu3Ro0apePHj6tdu3a296d3795q0qSJJOnjjz+2Pe7Vxx9/LKvVqnr16tm22bt371v2v9tzqWnTpqpcubImTZqksmXL6vXXX9e3336bbrurVq2yu587MDBQ0dHRt/wQ65969+6twYMHq06dOnrvvffUrVs3LVq0SOHh4elqOnLkiJ588kk1adJEkyZNUqFChdS1a1ft37/f7hj/6zy6lU2bNumll15Sx44dNWHCBCUmJioiIkLnz5+39dm9e7eaNm2q8+fPa8SIEerRo4dGjhyZK+6rB4BsYwAA8ryoqChDkrF9+3Zj+vTpRsGCBY2rV68ahmEYTz31lNGwYUPDMAwjMDDQaNGihW295cuXG5KMUaNG2W3vySefNCwWi3HkyBHDMAwjJibGkGS89NJLdv2efvppQ5Lx9ttv29p69OhhFC9e3Dh37pxd344dOxpeXl62uo4dO2ZIMqKiom57bIUKFTIqV658R6/D2bNnDRcXF+Pxxx83UlJSbO3Tp083JBnz5s2ztdWvX9+QZCxevNjWdvDgQUOS4eDgYGzZssXWvmbNmnS1vv3224Yk44knnrCr4aWXXjIkGXv27LG1pR3zP4WHhxslS5a0awsMDDQkGatXr07XPzAw0OjSpYvteeXKle3ey4xUqVLFKFq0qHH+/Hlb2549ewwHBwfjueeeS3cs3bt3t1u/bdu2hq+vr11bWt/169ffdt9pNf+zxrT33NfX17hw4YKt/auvvjIkGV9//bWtrU+fPkZGf6asX78+w/1ndD6l1fpP7u7udq9jmrSfoWPHjhmGkblzaeHChba2pKQko1ixYkZERITdfn777bd09c+dO9eQZLi4uBgNGzY03nrrLePHH3+0269hGMaPP/5oSDIWLVpk17569ep07Wnn0g8//GBrO3v2rGG1Wo1BgwbZ2u7kPMrodUyrN+13hGHcPLckGe+//76trVWrVkaBAgWMv/76y9Z2+PBhw8nJKcP3FwDyI0a6ASCfad++va5du6aVK1fqypUrWrly5S0vLV+1apUcHR3Vv39/u/ZBgwbJMAzbKN2qVaskKV2/AQMG2D03DENLly5Vq1atZBiGzp07Z3uEh4crLi7ujkbQ/uny5csqWLDgHfVdt26dkpOTNWDAADk4/N8/cT179pSnp6e++eYbu/4eHh52VwCUKVNG3t7eCg0NVa1atWztaf//22+/pdtnnz597J7369dP0v+9ZpLk5uZm+/+4uDidO3dO9evX12+//aa4uDi79YODgxUeHv6fx+rt7a39+/fr8OHDGS4/deqUYmJi1LVrV/n4+NjaK1WqpCZNmtjVl+aFF16we16vXj2dP39ely9ftrVFRkbKMAw1aNDgP2u8lQ4dOqhQoUJ2+5Eyfn1zSmbOpc6dO9ueu7i46OGHH053TN988428vLxUt25dW1v37t21evVqNWjQQJs2bdI777yjevXqKSQkRD///LOt35IlS+Tl5aUmTZrY/WxVr15dHh4eWr9+vd2+ypUrZ3ttJalIkSIqU6aMXU3/dR7dTlhYmEqVKmV7XqlSJXl6etq2n5KSonXr1qlNmzby9/e39StdurSaNWt21/sDgLyK0A0A+UyRIkUUFhamxYsXa9myZUpJSbnlpdm///67/P3904Xa0NBQ2/K0/zo4ONj9gS3dDKn/9Pfff+vSpUv64IMPVKRIEbtHt27dJN39xFCenp4ZXtZ9q+PJqC4XFxeVLFnStjzNgw8+mO6+Ui8vLwUEBKRrk5TuvllJCgkJsXteqlQpOTg42F2+/dNPPyksLMx2X3WRIkX0xhtvSFKGoftOjBw5UpcuXdJDDz2kihUravDgwdq7d69t+a1eC+nm+3vu3DklJCTYtZcoUcLueVowzui470V27edeZMW5VKhQoXTH9M033+jxxx9PNzFZeHi41qxZo0uXLumHH35Qnz599Pvvv6tly5a2n5nDhw8rLi5ORYsWTffzFR8fn+5n69+vc0Y1/dd5dDv/tf2zZ8/q2rVrKl26dLp+GbUBQH7FVJQAkA89/fTT6tmzp06fPq1mzZrJ29s7W/abmpoqSercubO6dOmSYZ9KlSrd1TbLli2rmJgYJScnZzjR1L241WzVt2o3/jW5XEb+HbyOHj2qxo0bq2zZspo8ebICAgLk4uKiVatWacqUKbbXLM0/R8Vv57HHHtPRo0f11Vdfae3atfroo480ZcoUzZ49W88///wdbePf7uW4s2s/t5p8KyUl5Z5quld3ckxXr17Vhg0bMpxEL02BAgVUr1491atXT4ULF9aIESP07bffqkuXLkpNTVXRokW1aNGiDNctUqTIXdd0L+dRdp0vAJDXEboBIB9q27atevfurS1btuizzz67Zb/AwECtW7dO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Ly8vxcXF3fJyCAAAAAC5X9CQb7J1f8fHtbjlssTERB07dkzBwcFydXXNxqqQVW73Ht5pjmSkGwAAAAAAkxC6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJ39MNAACAXCW7J8KSbj8ZFgDcC0a6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJoRsAAAAAAJMQugEAAAAAuYrFYtHy5cslScePH5fFYlFMTEyO1pRZzF4OAAAAANmo4oKK2bq/X7r8clf9u3btqgULFkiSnJyc9OCDD+qpp57SyJEj5erqakaJ+RqhGwAAAABgp2nTpoqKitL169e1c+dOdenSRRaLRePHj8/p0vIcLi8HAAAAANixWq0qVqyYAgIC1KZNG4WFhem7776TJKWmpmrs2LEKDg6Wm5ubKleurC+++MJu/f3796tly5by9PRUwYIFVa9ePR09elSStH37djVp0kSFCxeWl5eX6tevr127dmX7MWYXQjcAAAAA4Jb27dunn3/+WS4uLpKksWPHauHChZo9e7b279+vV155RZ07d9bGjRslSX/99Zcee+wxWa1Wff/999q5c6e6d++uGzduSJKuXLmiLl26aNOmTdqyZYtCQkLUvHlzXblyJceO0UxcXg4AAAAAsLNy5Up5eHjoxo0bSkpKkoODg6ZPn66kpCSNGTNG69atU+3atSVJJUuW1KZNmzRnzhzVr19fM2bMkJeXlz799FM5OztLkh566CHbths1amS3rw8++EDe3t7auHGjWrZsmX0HmU0I3QAAAAAAOw0bNtSsWbOUkJCgKVOmyMnJSREREdq/f7+uXr2qJk2a2PVPTk5W1apVJUkxMTGqV6+eLXD/25kzZzRs2DBt2LBBZ8+eVUpKiq5evaoTJ06Yflw5gdANAAAAALDj7u6u0qVLS5LmzZunypUra+7cuapQoYIk6ZtvvtEDDzxgt47VapUkubm53XbbXbp00fnz5/Xee+8pMDBQVqtVtWvXVnJysglHkvMI3QAAAACAW3JwcNAbb7yhgQMH6tChQ7JarTpx4oTq16+fYf9KlSppwYIFun79eoaj3T/99JNmzpyp5s2bS5L++OMPnTt3ztRjyElMpAYAAAAAuK2nnnpKjo6OmjNnjl599VW98sorWrBggY4ePapdu3bp/ffft323d9++fXX58mV17NhRO3bs0OHDh/Xxxx8r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HTtme80AAABAbnSgbGi27zP04IFs3yeQ2+Tqke4VK1aoRo0aeuqpp1S0aFFVrVpVH374oW35sWPHdPr0aYWFhdnavLy8VKtWLW3evPmW201KStLly5ftHgAAAAAAZLVcHbp/++03zZo1SyEhIVqzZo1efPFF9e/fXwsWLJAknT59WpLk5+dnt56fn59tWUbGjh0rLy8v2yMgIMC8gwAAAAAA3LdydehOTU1VtWrVNGbMGFWtWlW9evVSz549NXv27Hva7tChQxUXF2d7/PHHH1lUMQAAAAAA/ydXh+7ixYurXLlydm2hoaE6ceKEJKlYsWKSpDNnztj1OXPmjG1ZRqxWqzw9Pe0eAAAAAABktVwduuvUqaPY2Fi7tkOHDikwMFDSzUnVihUrpujoaNvyy5cva+vWrapdu3a21goAAAAAwL/l6tnLX3nlFT366KMaM2aM2rdvr23btumDDz7QBx98IEmyWCwaMGCARo0apZCQEAUHB+utt96Sv7+/2rRpk7PFAwAAAADue7k6dNesWVNffvmlhg4dqpEjRyo4OFhTp07VM888Y+vz2muvKSEhQb169dKlS5dUt25drV69Wq6urjlYOQAAAAAAuTx0S1LLli3VsmXLWy63WCwaOXKkRo4cmY1VAQAAAADw33L1Pd0AAAAAAORlhG4AAAAAAExC6AYAAAAAwCSEbgAAAAAATELoBgAAAADAJIRuAAAAAABMQugGAAAAAMAkhG4AAAAAAEyS6dB96dIlffTRRxo6dKguXLggSdq1a5f++uuvLCsOAAAAAIC8zCkzK+3du1dhYWHy8vLS8ePH1bNnT/n4+GjZsmU6ceKEFi5cmNV1AgAAAACQ52RqpHvgwIHq2rWrDh8+LFdXV1t78+bN9cMPP2RZcQAAAAAA5GWZCt3bt29X796907U/8MADOn369D0XBQAAAABAfpCp0G21WnX58uV07YcOHVKRIkXuuSgAAAAAAPKDTIXuJ554QiNHjtT169clSRaLRSdOnNDrr7+uiIiILC0QAAAAAIC8KlOhe9KkSYqPj1fRokV17do11a9fX6VLl1bBggU1evTorK4RAAAAAIA8KVOzl3t5eem7777Tpk2btHfvXsXHx6tatWoKCwvL6voAAAAAAMizMhW609StW1d169bNqloAAAAAAMhXMhW6p02blmG7xWKRq6urSpcu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fvjhB508eTLd8itXrujdd9/9z+24urpq2LBhun79uhllIrMMIJt16dLFaN26tV1bu3btjKpVq9qeSzK+/PLL7C0MpnjvvfeMQoUKGSdPnjSWL19uODs7GzExMYZhGMbmzZsNScZ7772X4bqpqam2/4+KijK8vLzslqekpBjOzs7G559/bmu7cOGC8eyzzxre3t6Gm5ub0bRpU+PQoUN2633xxRdGuXLlDBcXFyMwMNB499137ZbPmDHDKF26tGG1Wo2iRYsaERERhmHcPHcl2T2OHTuW2Zcm292v78X69esNScbFixfTLQsMDDSmTJliGIZhdOvWzWjRooXd8uTkZKNIkSLGRx99ZBiGYdSvX9/o06eP0adPH8PT09Pw9fU1hg0bZvf6JCYmGoMGDTL8/f2NAgUKGA8//LCxfv36dK/fV199ZYSGhhqOjo4ZHs/69eszrH337t12x5u2vdWrVxtly5Y13N3djfDwcOPkyZN2x/Lhhx8aZcuWNaxWq1GmTBljxowZdsu3bt1qVKlSxbBarUb16tWNZcuWGZKM3bt3Z/i65jcXL140JBkbNmzIcHl8fLzh6+trtG3b9pbbSDsPjh07luFrl5KSYjRo0MAIDAw0bty4kWW1I/fK6G+eNP/8/ZPGx8fHeOWVV8wvDLnKlStXDA8PD+PgwYNGhw4djNGjR9uWpf0+GTx4sOHh4WGcOXPGtqxy5crG22+/bXtev359o1u3boavr6/d7/gpU6YYgYGB2XEouAVGupHj9u3bp59//lkuLi45XQpM0K9fP1WuXFnPPvusevXqpeHDh6ty5cqSpE8++UQeHh566aWXMlzXYrHccrspKSlasGCBJKlatWq29q5du2rHjh1asWKFNm/eLMMw1Lx5c9snvjt37lT79u3VsWNH/fLLL4qMjNRbb72l+fPnS5J27Nih/v37a+TIkYqNjdXq1av12GOPSZLee+891a5dWz179rSN8gYEBNzza5RdeC9u7/nnn9fq1at16tQpW9vKlSt19epVdejQwda2YMECOTk5adu2bXrvvfc0efJku0tC+/btq82bN+vTTz/V3r179dRTT6lp06Z2lxVfvXpV48eP10cffaT9+/dr2rRpat++ve0qoFOnTunRRx+949qvXr2qd999Vx9//LF++OEHnThxQq+++qpt+aJFizR8+HCNHj1aBw4c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HdJ9WwTyrxs3bmjhwoWaNGmS3VVYe/bskb+/vz755JN06zz88MNq166dhgwZctttOzg4aOzYsZo1a5aOHz9u0hHgTjHSjVzhqaee0uDBgzVjxoz7bvKe/Gzo0KEyDEPjxo2TdPM7Sd999129+uqratasmWrXrq1BgwZp0KBB+v3339WuXTsFBATo1KlTmjt3riwWi22kT7r5ye/p06clSdeuXdN3332nNWvWaPjw4ZKkkJAQtW7dWj179tScOXNUsGBBDRkyRA888IBat24tSRo0aJBq1qypd955Rx06dNDmzZs1ffp0W9hcuXKlfvvtNz322GMqVKiQVq1apdTUVJUpU8Z2DFu3btXx48fl4eEhHx8fuxpzK96LO/f888+rZcuWSklJUZcuXdItP3HihAYOHKjevXtr165dev/99zVp0iRJ0kMPPaRnnnlGzz33nCZNmqSqVavq77//VnR0tCpVqpTu+1f/KSgoSGvWrFFsbKx8fX3l5eWl0qVLKyAgQJGRkRo9erQOHTpk29fdGDFihPr37y8vLy81bdpUSUlJ2rFjhy5evKiBAwfq6aef1ptvvqmePXtq6NChOn78+B19NU1+cv78eT311FPq3r27KlWqpIIFC2rHjh2aMGGCWrduLQ8PD3300Ufq0KGDWrRoof79+yskJETx8fFavXq1pPRXDpw/f16nT5/W1atXtW/fPk2dOlXbtm3TN998w1UG95G4uLh0H5b5+vpm2Pfll19WhQoVtGPHDtWoUSMbqkNOWrlypS5evKgePXrIy8vLbllERITmzp2rpk2bpltv9OjRKl++fLqrtf6tRYsWqlWrlubMmSM/P78srR13KaduJsf961aTiowdO9YoUqSIER8fz1eG5QMbNmwwHB0djR9//DHdsscff9xo1KiRbTKqzz77zGjQoIHh5eVlODs7Gw8++KDx9NNPG1u2bLGtkzZZVNrDarUaDz30kDF69Gi7r95J+5oqLy8vw83NzQgPD7/l11Q5OzsbJUqUMCZOnGhb9uOPPxr169c3ChUqZLi5uRmVKlWym/AoNjbWeOSRRww3N7c885Vh9/t7cadfGZYmNTXVCAwMNJo3b56uf/369Y2XXnrJeOGFFwxPT0+jUKFCxhtvvGE3sVpycrIxfPhwIygoyHB2djaKFy9utG3b1ti7d6/t9fv3V64ZhmGcPXvWaNKkieHh4WH7yjDDMIxNmzYZFStWNFxdXY169eoZS5YsyfArw/7pyy+/NP79T/yiRYuMKlWqGC4uLkahQoWMxx57zFi2bJlt+ebNm43KlSsbLi4uRpUqVYylS5feVxOpJSYmGkOGDDGqVatmeHl5GQUKFDDKlCljDBs2zLh69aqt3/bt240nn3zSKFq0qOHk5GT4+voa4eHhxqeffpruK8PSHgUKFDBCQ0ONl156iUmy7jMZfR2gJKNHjx4Z/v4xDMMIDw83mjVrlv3FItu1bNkyw39rDOPm1zhKMvbs2ZPh7+JevXoZkjKcSO2ffv75Z0MSE6nlMIth/Gs+egAA7mPx8fF64IEHFBUVpXbt2tkta9CggapUqaKpU6fmTHEAACDP4fJyAAB0837bc+fOadKkSfL29tYTTzyR0yUBAIB8gNANAIBu3qsdHBysBx98UPPnz//Pe+UAAADuBJeXAwAAAABgktw/5S4AAAAAAHkUoRsAAAAAAJMQugEAAAAAMAmhGwAAAAAAkxC6AQAAAAAwCaEbAADclQ0bNshisejSpUt3vE5QUJCmTp1qWk0AAORWhG4AAPKZrl27ymKx6IUXXki3rE+fPrJYLOratWv2FwYAwH2I0A0AQD4UEBCgTz/9VNeuXbO1JSYmavHixSpRokQOVgYAwP2F0A0AQD5UrVo1BQQEaNmyZba2ZcuWqUSJEqpataqtLSkpSf3791fRokXl6uqqunXravv27XbbWrVqlR566CG5ubmpYcOGOn78eLr9bdq0SfXq1ZObm5sCAgLUv39/JSQkmHZ8AADkFYRuAADyqe7duysqKsr2fN68eerWrZtdn9dee01Lly7VggULtGvXLpUuXVrh4eG6cOGCJOmPP/5Qu3bt1KpVK8XExOj555/XkCFD7LZx9OhRNW3aVBEREdq7d68+++wzbdq0SX379jX/IAEAyOUI3QAA5FOdO3fWpk2b9Pvvv+v333/XTz/9pM6dO9uWJyQkaNasWZo4caKaNWumcuXK6cMPP5Sbm5vmzp0rSZo1a5ZKlSqlSZMmqUyZMnrmmWfS3Q8+duxYPfPMMxowYIBCQkL06KOPatq0aVq4cKESExOz85ABAMh1nHK6AAAAYI4iRYqoRYsWmj9/vgzDUIsWLVS4cGHb8qNHj+r69euqU6eOrc3Z2VkPP/ywDhw4IEk6cOCAatWqZbfd2rVr2z3fs2eP9u7dq0WLFtnaDMNQamqqjh07ptDQUDMODwCAPIHQDQBAPta9e3fbZd4zZswwZR/x8fHq3bu3+vfvn24Zk7YBAO53hG4AAPKxpk2bKjk5WRaLReHh4XbLSpUqJRcXF/30008KDAyUJF2/fl3bt2/XgAEDJEmhoaFasWKF3Xpbtmyxe16tWjX9+uuvKl26tHkHAgBAHsU93QAA5GOOjo46cOCAfv31Vzk6Ototc3d314svvqjBgwdr9erV+vXXX9WzZ09dvXpVPXr0kCS98MILOnz4sAYPHqzY2FgtXrxY8+fPt9vO66+/rp9//ll9+/ZVTEyMDh8+rK+++oqJ1AAAEKEbAIB8z9PTU56enhkuGzdunCIiIvTss8+qWrVqOnLkiNasWaNChQpJunl5+NKlS7V8+XJVrlxZs2fP1pgxY+y2UalSJW3cuFGHDh1SvXr1VLVqVQ0fPlz+/v6mHxsAALmdxTAMI6eLAAAAAAAgP2KkGwAAAAAAkxC6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJoRsAAAAAAJMQugEAAAAAMAmhGwAAAAAAkxC6AQAAAAAwCaEbAAAAAACTELoBAAAAADAJoRsAAAAAAJMQugEAAAAAMMn/A0Wv7kGQsG1QAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Data from the summary\n",
        "# For dichotomy IE: Category 1 = I, Category 2 = E\n",
        "# For NS: Category 1 = N, Category 2 = S\n",
        "# For FT: Category 1 = F, Category 2 = T\n",
        "# For JP: Category 1 = J, Category 2 = P\n",
        "\n",
        "dichotomies = ['IE', 'NS', 'FT', 'JP']\n",
        "\n",
        "# \"Before\" counts per dichotomy [Category 1, Category 2]\n",
        "before_counts = {\n",
        "    'IE': [64543, 20310],\n",
        "    'NS': [77488, 7365],\n",
        "    'FT': [29550, 55303],\n",
        "    'JP': [35531, 49322]\n",
        "}\n",
        "\n",
        "# \"After\" counts per dichotomy – note that after balancing, both categories become equal.\n",
        "after_counts = {\n",
        "    'IE': [64543, 64543],\n",
        "    'NS': [77488, 77488],\n",
        "    'FT': [55303, 55303],\n",
        "    'JP': [49322, 49322]\n",
        "}\n",
        "\n",
        "# Extract data into lists for plotting\n",
        "before_cat1 = [before_counts[d][0] for d in dichotomies]\n",
        "before_cat2 = [before_counts[d][1] for d in dichotomies]\n",
        "after_cat1 = [after_counts[d][0] for d in dichotomies]\n",
        "after_cat2 = [after_counts[d][1] for d in dichotomies]\n",
        "\n",
        "# Set up positions for 4 bars per dichotomy group.\n",
        "n_groups = len(dichotomies)\n",
        "indices = np.arange(n_groups)\n",
        "bar_width = 0.2\n",
        "\n",
        "# Calculate positions for each set:\n",
        "pos_before_cat1 = indices - 1.5 * bar_width\n",
        "pos_before_cat2 = indices - 0.5 * bar_width\n",
        "pos_after_cat1  = indices + 0.5 * bar_width\n",
        "pos_after_cat2  = indices + 1.5 * bar_width\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "# Plot the bars\n",
        "bars1 = ax.bar(pos_before_cat1, before_cat1, bar_width, label='Before: Category 1 (I, N, F, J)', color='skyblue')\n",
        "bars2 = ax.bar(pos_before_cat2, before_cat2, bar_width, label='Before: Category 2 (E, S, T, P)', color='salmon')\n",
        "bars3 = ax.bar(pos_after_cat1, after_cat1, bar_width, label='After: Category 1', color='lightgreen')\n",
        "bars4 = ax.bar(pos_after_cat2, after_cat2, bar_width, label='After: Category 2', color='orange')\n",
        "\n",
        "# Labeling and title\n",
        "ax.set_xlabel('MBTI Dichotomy')\n",
        "ax.set_ylabel('Number of Samples')\n",
        "ax.set_title('Balancing Effect on Personality Categories')\n",
        "ax.set_xticks(indices)\n",
        "ax.set_xticklabels(dichotomies)\n",
        "ax.legend()\n",
        "\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "YKM5syIWKyAg",
        "outputId": "02f68eec-e23a-4f18-8a36-9ae792ab88d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "muDTfsBxL453"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}